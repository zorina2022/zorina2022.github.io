<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python笔记</title>
      <link href="/2022/11/17/python%E7%AC%94%E8%AE%B0%20%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%AF%BE%E7%A8%8B/"/>
      <url>/2022/11/17/python%E7%AC%94%E8%AE%B0%20%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="python笔记（HM）"><a href="#python笔记（HM）" class="headerlink" title="python笔记（HM）"></a>python笔记（HM）</h1><h2 id="一、计算机组成"><a href="#一、计算机组成" class="headerlink" title="一、计算机组成"></a>一、计算机组成</h2><h3 id="1-1-CPU的作用"><a href="#1-1-CPU的作用" class="headerlink" title="1.1 CPU的作用"></a>1.1 CPU的作用</h3><p>​        处理指令、运算数据</p><h3 id="1-2-内存的作用（内存储器）"><a href="#1-2-内存的作用（内存储器）" class="headerlink" title="1.2 内存的作用（内存储器）"></a>1.2 内存的作用（内存储器）</h3><p>​       临时存储数据，存储的是CPU要处理的数据</p><p>​       其读写速度大于硬盘的（外存储器）</p><p>​       数据方向：硬盘—内存—CPU—硬盘</p><hr><h2 id="二、python简介"><a href="#二、python简介" class="headerlink" title="二、python简介"></a>二、python简介</h2><h3 id="2-1-python是什么"><a href="#2-1-python是什么" class="headerlink" title="2.1 python是什么"></a>2.1 python是什么</h3><p>​      python是一门逻辑简单、语法简单的编程语言</p><h3 id="2-2-python的版本"><a href="#2-2-python的版本" class="headerlink" title="2.2 python的版本"></a>2.2 python的版本</h3><p>​     公司一般要求在3.5以上的版本开发，我下载的是3.9版本，课程讲解的是3.7</p><h3 id="2-3-python的应用领域"><a href="#2-3-python的应用领域" class="headerlink" title="2.3 python的应用领域"></a>2.3 python的应用领域</h3><p>​       web开发、网络爬虫、自动化测试、数据分析、人工智能、机器学习、自动化运维</p><hr><h2 id="三、python基础的学习路线"><a href="#三、python基础的学习路线" class="headerlink" title="三、python基础的学习路线"></a>三、python基础的学习路线</h2><h3 id="2-1-python入门"><a href="#2-1-python入门" class="headerlink" title="2.1 python入门"></a>2.1 python入门</h3><p>​      环境搭建、变量、输入输出、数据类型</p><h3 id="2-2-流程控制"><a href="#2-2-流程控制" class="headerlink" title="2.2 流程控制"></a>2.2 流程控制</h3><p>​      条件语句、循环语句</p><h3 id="2-3-数据序列"><a href="#2-3-数据序列" class="headerlink" title="2.3 数据序列"></a>2.3 <em>数据序列</em></h3><p>​     字符串、列表、字典、元组等等</p><h3 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 <em>函数</em></h3><p>​      参数、返回值、<em>递归</em>、Lambda表达式</p><h3 id="2-5-文件操作"><a href="#2-5-文件操作" class="headerlink" title="2.5 文件操作"></a>2.5 文件操作</h3><p>​       打开和关闭、读取和写入</p><h3 id="2-6-面向对象"><a href="#2-6-面向对象" class="headerlink" title="2.6 面向对象"></a>2.6 <em>面向对象</em></h3><p>​      <em>类和对象</em>、<em>继承</em>、面向对象高级</p><h3 id="2-7-模块、包、异常"><a href="#2-7-模块、包、异常" class="headerlink" title="2.7 模块、包、异常"></a>2.7 模块、包、异常</h3><hr><h2 id="三、Python解释器"><a href="#三、Python解释器" class="headerlink" title="三、Python解释器"></a>三、Python解释器</h2><h3 id="3-1-python解释器作用"><a href="#3-1-python解释器作用" class="headerlink" title="3.1 python解释器作用"></a>3.1 python解释器作用</h3><p>​      运行文件（翻译程序员写的代码让计算机运行）</p><h3 id="3-2-Python解释器种类"><a href="#3-2-Python解释器种类" class="headerlink" title="3.2 Python解释器种类"></a>3.2 Python解释器种类</h3><ul><li><em>CPython</em>，C语言开发的解释器[官方]，应用广泛的解释器。（课程里使用的）</li><li>IPython，基于CPython的一种交互式解释器。</li><li>其他解释器<ol><li>PyPy，基于Python语言开发的解释器。</li><li>Jython，运行在Java平台的解释器，直接把Python代码编译成Java字节码执行。</li><li>IronPython，运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</li></ol></li></ul><h3 id="3-3-解释器的下载地址"><a href="#3-3-解释器的下载地址" class="headerlink" title="3.3 解释器的下载地址"></a>3.3 解释器的下载地址</h3><hr><h2 id="四、pycharm"><a href="#四、pycharm" class="headerlink" title="四、pycharm"></a>四、pycharm</h2><h3 id="4-1-PyCharm的作用"><a href="#4-1-PyCharm的作用" class="headerlink" title="4.1 PyCharm的作用"></a>4.1 PyCharm的作用</h3><p>​         PyCharm是一种Python IDE集成开发软件，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，内部集成的功能如下：</p><ul><li>Project管理</li><li>智能提示</li><li>语法高亮</li><li>代码跳转</li><li>调试代码</li><li>解释代码(解释器)</li><li>框架和库</li><li>……</li></ul><h3 id="4-2-下载地址"><a href="#4-2-下载地址" class="headerlink" title="4.2 下载地址"></a>4.2 下载地址</h3><h3 id="4-3-PyCharm的基本设置"><a href="#4-3-PyCharm的基本设置" class="headerlink" title="4.3 PyCharm的基本设置"></a>4.3 PyCharm的基本设置</h3><p>[file] – [Settings]/[Default Settings]。</p><h4 id="4-3-1-修改主题"><a href="#4-3-1-修改主题" class="headerlink" title="4.3.1 修改主题"></a>4.3.1 修改主题</h4><p>[Appearance &amp; Behavior] – [Appearance]</p><ul><li>Theme：修改主题</li><li>Name：修改主题字体</li><li>Size：修改主题字号</li></ul><h4 id="4-3-2-修改代码文字格式"><a href="#4-3-2-修改代码文字格式" class="headerlink" title="4.3.2 修改代码文字格式"></a>4.3.2 修改代码文字格式</h4><p>[Editor] – [Font]</p><ul><li>Font：修改字体</li><li>Size：修改字号</li><li>Line Spacing：修改行间距</li></ul><h4 id="4-3-3修改解释器"><a href="#4-3-3修改解释器" class="headerlink" title="4.3.3修改解释器"></a>4.3.3修改解释器</h4><p>[Project: 项目名称] – [Project Interpreter] – [设置图标] – [Add] – 浏览到目标解释器 – [OK] – [OK]。</p><h4 id="4-3-4项目管理"><a href="#4-3-4项目管理" class="headerlink" title="4.3.4项目管理"></a>4.3.4项目管理</h4><h5 id="打开项目"><a href="#打开项目" class="headerlink" title="打开项目"></a>打开项目</h5><p>[File] – [Open] – 浏览选择目标项目根目录 – [OK] – 选择打开项目方式。</p><p>打开项目的方式共三种，分别如下：</p><ol><li>This Window</li></ol><p>覆盖当前项目，从而打开目标项目</p><ol start="2"><li>New Window</li></ol><p>在新窗口打开，则打开两次PyCharm，每个PyCharm负责一个项目。</p><ol start="3"><li>Attach</li></ol><p>将两个项目在同一个窗口打开</p><h5 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h5><p>[File] – [Close Project]/[Close Projects in current window]</p><h4 id="4-3-5-总结"><a href="#4-3-5-总结" class="headerlink" title="4.3.5 总结"></a>4.3.5 总结</h4><ul><li>PyCharm新建文件</li></ul><p>项目管理空白位置 — 右键 – New – PythonFile</p><ul><li>运行文件</li></ul><p>代码内部 — 右键 – Run</p><ul><li>修改代码文字格式</li></ul><p>[file] – [Settings]/[Default Settings] – [Editor] – [Font]</p><hr><h2 id="五、-注释"><a href="#五、-注释" class="headerlink" title="五、 注释"></a>五、 注释</h2><h3 id="5-1-注释的作用"><a href="#5-1-注释的作用" class="headerlink" title="5.1 注释的作用"></a>5.1 注释的作用</h3><p>通过用自己熟悉的语言，在程序中对某些代码进行标注说明，这就是注释的作用，能够大大增强程序的可读性。</p><p>解释器不执行注释内容</p><h3 id="5-2-注释的分类及语法"><a href="#5-2-注释的分类及语法" class="headerlink" title="5.2 注释的分类及语法"></a>5.2 注释的分类及语法</h3><p>注释分为两类：单行注释 和多行注释。</p><ul><li>单行注释（快捷键：ctrl+/）</li></ul><p>只能注释一行内容，语法如下：（井号）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注释内容</span></code></pre><ul><li>多行注释</li></ul><p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：（六个引号，三个一组）</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""    第一行注释    第二行注释    第三行注释"""</span><span class="token triple-quoted-string string">'''    注释1    注释2    注释3'''</span></code></pre><hr><h2 id="六、变量"><a href="#六、变量" class="headerlink" title="六、变量"></a>六、变量</h2><h3 id="6-1-变量的作用"><a href="#6-1-变量的作用" class="headerlink" title="6.1  变量的作用"></a>6.1  变量的作用</h3><p>举例体验：我们去图书馆读书，怎么样快速找到自己想要的书籍呢？是不是管理员提前将书放到固定位置，并把这个位置进行了编号，我们只需要在图书馆中按照这个编号查找指定的位置就能找到想要的书籍。</p><p>这个编号其实就是把书籍存放的书架位置起了一个名字，方便后期查找和使用。</p><p>程序中，数据都是临时存储在内存中，为了更快速的查找或使用这个数据，通常我们把这个数据在内存中存储之后定义一个名称，这个名称就是变量。</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/09/484adc77a4df928a.png"></p><blockquote><p>变量就是一个存储数据的的时候当前数据所在的内存地址的名字而已。</p></blockquote><h3 id="6-2-定义变量"><a href="#6-2-定义变量" class="headerlink" title="6.2 定义变量"></a>6.2 定义变量</h3><p>“=”是赋值的作用</p><p>计算等号右边的值然后赋值到左边的变量</p><pre class=" language-python"><code class="language-python">变量名 <span class="token operator">=</span> 值</code></pre><blockquote><p>变量名自定义，要满足标识符命名规则。</p></blockquote><h3 id="6-3-标识符"><a href="#6-3-标识符" class="headerlink" title="6.3 标识符"></a>6.3 标识符</h3><p>标识符命名规则是Python中定义各种名字的时候的统一规范，具体如下：</p><ul><li>由数字、字母、下划线组成</li><li>不能数字开头</li><li>不能使用内置关键字（python内部自己定义了功能的关键词）</li><li>严格区分大小写</li></ul><pre class=" language-html"><code class="language-html">False     None    True   and      as       assert   break     class  continue  def     del    elif     else     except   finally   forfrom      global  if     import   in       is       lambda    nonlocalnot       or      pass   raise    return   try      while     with  yield</code></pre><h3 id="6-4-命名习惯"><a href="#6-4-命名习惯" class="headerlink" title="6.4 命名习惯"></a>6.4 命名习惯</h3><ul><li>见名知义。</li><li>大驼峰：即每个单词首字母都大写，例如：<code>MyName</code>。</li><li>小驼峰：第二个（含）以后的单词首字母大写，例如：<code>myName</code>。</li><li>下划线：例如：<code>my_name</code>。</li></ul><h3 id="6-5-使用变量"><a href="#6-5-使用变量" class="headerlink" title="6.5 使用变量"></a>6.5 使用变量</h3><p>定义变量后使用变量</p><pre class=" language-python"><code class="language-python">my_name <span class="token operator">=</span> <span class="token string">'TOM'</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_name<span class="token punctuation">)</span>schoolName <span class="token operator">=</span> <span class="token string">'黑马程序员'</span><span class="token keyword">print</span><span class="token punctuation">(</span>schoolName<span class="token punctuation">)</span></code></pre><h3 id="6-7-认识bug"><a href="#6-7-认识bug" class="headerlink" title="6.7 认识bug"></a>6.7 认识bug</h3><hr><p>所谓bug，就是程序中的错误。如果程序有错误，需要程序员排查问题，纠正错误。</p><h3 id="6-8-Debug工具"><a href="#6-8-Debug工具" class="headerlink" title="6.8 Debug工具"></a>6.8 Debug工具</h3><hr><p>Debug工具是PyCharm IDE中集成的用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程或者调解bug。</p><p>Debug工具使用步骤：</p><ol><li>打断点</li><li>Debug调试</li></ol><h4 id="6-8-1-打断点"><a href="#6-8-1-打断点" class="headerlink" title="6.8.1 打断点"></a>6.8.1 打断点</h4><hr><ul><li>断点位置</li></ul><p>目标要调试的代码块的第一行代码即可，即一个断点即可。</p><ul><li>打断点的方法</li></ul><p>单击目标代码的行号右侧空白位置。</p><p><img src="https://s3.bmp.ovh/imgs/2022/07/09/31d56cded384b3ec.png"></p><h4 id="6-8-2-Debug调试"><a href="#6-8-2-Debug调试" class="headerlink" title="6.8.2 Debug调试"></a>6.8.2 Debug调试</h4><hr><p>打成功断点后，在文件内部任意位置 — 右键 – Debug’文件名’ — 即可调出Debug工具面板 – 单击Step Over/F8，即可按步执行代码。</p><h4 id="6-8-3-Debug输出面板分类"><a href="#6-8-3-Debug输出面板分类" class="headerlink" title="6.8.3 Debug输出面板分类"></a>6.8.3 Debug输出面板分类</h4><hr><ul><li>Debugger<ul><li>显示变量和变量的细节(变量的类别)</li></ul></li><li>Console<ul><li>输出内容（分步逐步展示）</li></ul></li></ul><h3 id="6-9-认识数据类型"><a href="#6-9-认识数据类型" class="headerlink" title="6.9  认识数据类型"></a>6.9  认识数据类型</h3><hr><p><strong>在 Python 里为了应对不同的业务需求，也把数据分为不同的类型。</strong></p><img src="https://s3.bmp.ovh/imgs/2022/07/10/fde45ea3ca9e3e15.png" style="zoom:80%;"><blockquote><p>检测数据类型的方法：<code>type()</code></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'int'> -- 整型</span>b <span class="token operator">=</span> <span class="token number">1.1</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'float'> -- 浮点型</span>c <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bool'> -- 布尔型  # 通常用来判断（只有两个取值）</span>d <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'str'> -- 字符串   # 数据通常都要带引号</span>e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'list'> -- 列表    # 中括号，可以存储多个数据</span>f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'> -- 元组   # 小括号</span>h <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'set'> -- 集合     # 大括号</span>g <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'> -- 字典    # 键值对</span></code></pre><h2 id="七、输出"><a href="#七、输出" class="headerlink" title="七、输出"></a>七、输出</h2><hr><p>作用：程序输出内容给用户</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello Python'</span><span class="token punctuation">)</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需求：输出“今年我的年龄是18岁”</span></code></pre><h3 id="7-1-格式化输出"><a href="#7-1-格式化输出" class="headerlink" title="7.1 格式化输出"></a>7.1 格式化输出</h3><p>所谓的格式化输出即按照一定的格式输出内容。（带格式的）</p><h4 id="7-1-1-格式化符号"><a href="#7-1-1-格式化符号" class="headerlink" title="7.1.1 格式化符号"></a>7.1.1 格式化符号</h4><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center"><strong>%s</strong></td><td align="center">字符串</td></tr><tr><td align="center"><strong>%d</strong></td><td align="center">有符号的十进制整数（可以添加正负号）</td></tr><tr><td align="center"><strong>%f</strong></td><td align="center">浮点数</td></tr><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li></ul><h4 id="7-1-2-体验"><a href="#7-1-2-体验" class="headerlink" title="7.1.2 体验"></a>7.1.2 体验</h4><p>格式化字符串除了%s，还可以写为<code>f'{表达式}'</code></p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">18</span> name <span class="token operator">=</span> <span class="token string">'TOM'</span>           <span class="token comment" spellcheck="true"># 准备数据 </span>weight <span class="token operator">=</span> <span class="token number">75.5</span>student_id <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment" spellcheck="true"># 格式化符号输出数据  </span><span class="token comment" spellcheck="true"># 我的名字是TOM</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#再连接一个百分号去联系变量来填充</span><span class="token comment" spellcheck="true"># 我的学号是0001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的学号是%4d'</span> <span class="token operator">%</span> student_id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 我的体重是75.50公斤</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的体重是%.2f公斤'</span> <span class="token operator">%</span> weight<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># %.2f 保留小数点后两位 </span><span class="token comment" spellcheck="true"># 我的名字是TOM，今年18岁了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，今年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 我的名字是TOM，明年19岁了</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s，明年%d岁了'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 我的名字是TOM，明年19岁了 f'{表达式}'  大括号内可以加简单的运算</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{name}, 明年{age + 1}岁了'</span><span class="token punctuation">)</span></code></pre><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p></blockquote><h4 id="7-1-3-转义字符"><a href="#7-1-3-转义字符" class="headerlink" title="7.1.3 转义字符"></a>7.1.3 转义字符</h4><ul><li><code>\n</code>：换行。 （反斜杠），换行输出</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello python"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello\npython"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tabcd"</span><span class="token punctuation">)</span></code></pre><h4 id="7-1-4-结束符"><a href="#7-1-4-结束符" class="headerlink" title="7.1.4 结束符"></a>7.1.4 结束符</h4><blockquote><p>想一想，为什么两个print会换行输出？(为什么默认换行)</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出的内容'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出的内容"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输出的内容"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"..."</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#可以自己设定</span></code></pre><blockquote><p>在Python中，print()， <strong>默认自带<code>end="\n"</code>这个换行结束符</strong>，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><h2 id="八、输入"><a href="#八、输入" class="headerlink" title="八、输入"></a>八、输入</h2><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><img src="https://s3.bmp.ovh/imgs/2022/07/10/a5f437087a80720f.png" style="zoom: 50%;"><h3 id="8-1-输入的语法"><a href="#8-1-输入的语法" class="headerlink" title="8.1  输入的语法"></a>8.1  输入的语法</h3><pre class=" language-python"><code class="language-python">input<span class="token punctuation">(</span><span class="token string">"提示信息"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 提示信息：给用户的提示文字</span></code></pre><h3 id="8-2-输入的特点"><a href="#8-2-输入的特点" class="headerlink" title="8.2 输入的特点"></a>8.2 输入的特点</h3><ul><li>当程序执行到<code>input</code>，<strong>等待用户输入</strong>，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，<strong>一般存储到变量</strong>，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做<strong>字符串</strong>处理。</li></ul><pre class=" language-python"><code class="language-python">password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的密码：'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把用户的输入存储到变量password里</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的密码是{password}'</span><span class="token punctuation">)</span>                                                         <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、转换数据类型"><a href="#九、转换数据类型" class="headerlink" title="九、转换数据类型"></a>九、转换数据类型</h2><hr><h3 id="9-1-转换数据类型的作用"><a href="#9-1-转换数据类型的作用" class="headerlink" title="9.1 转换数据类型的作用"></a>9.1 转换数据类型的作用</h3><hr><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？（得到程序想要用的数据类型）</p><p>答：转换数据类型即可，即将字符串类型转换成整型。</p><h3 id="9-2-转换数据类型的函数"><a href="#9-2-转换数据类型的函数" class="headerlink" title="9.2 转换数据类型的函数"></a>9.2 转换数据类型的函数</h3><hr><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>int(x )</strong></td><td align="center">将x转换为一个整数</td></tr><tr><td align="center"><strong>float(x )</strong></td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center"><strong>str(x )</strong></td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center"><strong>eval(str )</strong></td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象（把字符串的数据转换为它原本的类型）</td></tr><tr><td align="center"><strong>tuple(s )</strong></td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center"><strong>list(s )</strong></td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h3 id="9-3-快速体验"><a href="#9-3-快速体验" class="headerlink" title="9.3 快速体验"></a>9.3 快速体验</h3><hr><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 接收用户输入</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的幸运数字：'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. 打印结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"您的幸运数字是{num}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 检测接收到的用户输入的数据类型 -- str类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. 转换数据类型为整型 -- int类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""1. input2. 检测input 数据类型str3. int() 转换数据类型4. 检测是否转换成功"""</span>num <span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># str</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># int</span></code></pre><h4 id="9-4-实验"><a href="#9-4-实验" class="headerlink" title="9.4 实验"></a>9.4 实验</h4><hr><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. float() -- 转换成浮点型</span>num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出为1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>float<span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2. str() -- 转换成字符串类型</span>num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>str<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. tuple() -- 将一个序列转换成元组</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4. list() -- 将一个序列转换成列表</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>list<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span>str1 <span class="token operator">=</span> <span class="token string">'10'</span>str2 <span class="token operator">=</span> <span class="token string">'[1, 2, 3]'</span>str3 <span class="token operator">=</span> <span class="token string">'(1000, 2000, 3000)'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十、Pycharm-交互式开发"><a href="#十、Pycharm-交互式开发" class="headerlink" title="十、Pycharm 交互式开发"></a>十、Pycharm 交互式开发</h2><hr><h3 id="10-1-Python-Console"><a href="#10-1-Python-Console" class="headerlink" title="10.1  Python Console"></a>10.1  Python Console</h3><hr><p>​     在界面的最下方，一般用于一些简单的测试且展示结果较快。在这个界面输入的代码无法存入硬盘，只能临时存储到内存</p><p>​     清空交互式开发环境只可以通过关闭项目来进行</p><h2 id="十一、运算符的分类"><a href="#十一、运算符的分类" class="headerlink" title="十一、运算符的分类"></a>十一、运算符的分类</h2><hr><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h2 id="11-1-算数运算符"><a href="#11-1-算数运算符" class="headerlink" title="11.1  算数运算符"></a>11.1  算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">/</td><td align="center">除</td><td>10 / 2 输出结果为 5</td></tr><tr><td align="center">//</td><td align="center">整除</td><td>9 // 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code>（指数） 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li><li>参与运算的值有小数，结果一定是小数</li><li>除法运算得到的结果一定是小数</li></ul><pre class=" language-python"><code class="language-python"><span class="token number">9</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">4</span></code></pre><h2 id="11-2-赋值运算符"><a href="#11-2-赋值运算符" class="headerlink" title="11.2  赋值运算符"></a>11.2  赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul><li>单个变量赋值</li></ul><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><ul><li>多个变量赋值</li></ul><p>注意顺序，变量和数据顺序一一对应，并且用逗号隔开</p><pre class=" language-python"><code class="language-python">num1<span class="token punctuation">,</span> float1<span class="token punctuation">,</span> str1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>float1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span></code></pre><ul><li>多变量赋相同值</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> </code></pre><h2 id="11-3-复合赋值运算符"><a href="#11-3-复合赋值运算符" class="headerlink" title="11.3  复合赋值运算符"></a>11.3  复合赋值运算符</h2><p>先算算数运算符，再赋值到左边的变量中</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等价于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等价于 c = c- a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等价于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等价于 c = c / a</td></tr><tr><td>//=</td><td>整除赋值运算符</td><td>c //= a 等价于 c = c // a</td></tr><tr><td>%=</td><td>取余赋值运算符</td><td>c %= a 等价于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c ** = a 等价于 c = c ** a</td></tr></tbody></table><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 输出101  a = a + 1,最终a = 100 + 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">2</span>b <span class="token operator">*=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 输出6  b = b * 3,最终b = 2 * 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">10</span>d <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 先算复合赋值运算符右侧1 + 2 = 3, 再算复合赋值运算d *=3, d = 10 * 3</span></code></pre><h2 id="11-4-比较运算符"><a href="#11-4-比较运算符" class="headerlink" title="11.4 比较运算符"></a>11.4 比较运算符</h2><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True</td></tr><tr><td>!=</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;=</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a=7,b=3，则(a &lt; b) 为 False如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td>&lt;=</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">7</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span></code></pre><h2 id="11-5-逻辑运算符"><a href="#11-5-逻辑运算符" class="headerlink" title="11.5 逻辑运算符"></a>11.5 逻辑运算符</h2><p>可以用于扩充条件</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><p>短路问题：and一假即假，or一真即真<br>                    若在and中，x为False,则不计算y，直接返回x<br>                     or语句类似</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True 都真才真  若表达式复杂，可以在表达式两边加括号，避免误读</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False 有一个是假，返回假</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True 只要有一个是真，整个 or 连接表达式为真（一真则真，都假才假）</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> a <span class="token operator">></span> b<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># True 反义词</span></code></pre><h3 id="11-6-数字之间的逻辑运算"><a href="#11-6-数字之间的逻辑运算" class="headerlink" title="11.6  数字之间的逻辑运算"></a>11.6  数字之间的逻辑运算</h3><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>b <span class="token operator">=</span> <span class="token number">1</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">and</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">and</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">and</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">and</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">and</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">and</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">or</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">or</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">or</span> c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><p>一. 了解条件语句</p><p>假设一个场景：</p><ul><li>同学们这个年龄去过网吧吗？</li><li>去网吧进门想要上网必须做的一件事是做什么？（考虑重点）</li><li>为什么要把身份证给工作人员？</li><li>是不是就是为了判断是否成年？</li><li>是不是如果成年可以上网？如果不成年则不允许上网？</li></ul><p>其实这里所谓的判断就是条件语句，即<strong>条件成立执行某些代码，条件不成立则不执行这些代码</strong>。</p><h2 id="十二、if-语法"><a href="#十二、if-语法" class="headerlink" title="十二、if 语法"></a>十二、if 语法</h2><h3 id="12-1-语法"><a href="#12-1-语法" class="headerlink" title="12.1 语法"></a>12.1 语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span class="token number">1</span>    条件成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="12-2-快速体验"><a href="#12-2-快速体验" class="headerlink" title="12.2 快速体验"></a>12.2 快速体验</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># True 表示条件成立</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'条件成立执行的代码1'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'条件成立执行的代码2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下方的代码没有缩进到if语句块（不属于if语句块），所以和if条件无关</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是无论条件是否成立都要执行的代码'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 顶格写</span></code></pre><h3 id="12-3-实例：上网"><a href="#12-3-实例：上网" class="headerlink" title="12.3 实例：上网"></a>12.3 实例：上网</h3><p>需求分析：如果用户年龄大于等于18岁，即成年，输出”已经成年，可以上网”。</p><h4 id="12-3-1-简单版"><a href="#12-3-1-简单版" class="headerlink" title="12.3.1 简单版"></a>12.3.1 简单版</h4><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经成年，可以上网'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'系统关闭'</span><span class="token punctuation">)</span></code></pre><h4 id="12-3-2-进阶版"><a href="#12-3-2-进阶版" class="headerlink" title="12.3.2 进阶版"></a>12.3.2 进阶版</h4><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出”您的年龄是’用户输入的年龄’，已经成年，可以上网”。</p><p>1、用户输入</p><p>2、保存用户输入的年龄</p><p>3、if条件判断</p><p>TypeEorror 类型错误</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型，数据类型相同才可以进行比较</span>age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},已经成年，可以上网'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'系统关闭'</span><span class="token punctuation">)</span></code></pre><h3 id="12-4-if…else…"><a href="#12-4-if…else…" class="headerlink" title="12.4 if…else…"></a>12.4 if…else…</h3><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><p> <strong>语法</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token punctuation">:</span>    条件成立执行的代码<span class="token number">1</span>    条件成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    条件不成立执行的代码<span class="token number">1</span>    条件不成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="12-4-1-实用版：网吧上网"><a href="#12-4-1-实用版：网吧上网" class="headerlink" title="12.4.1 实用版：网吧上网"></a>12.4.1 实用版：网吧上网</h4><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},已经成年，可以上网'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},未成年，请自行回家写作业'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'系统关闭'</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p><p>True 只执行 if ;  False 只执行 else</p></blockquote><h3 id="12-5-多重判断"><a href="#12-5-多重判断" class="headerlink" title="12.5  多重判断"></a>12.5  多重判断</h3><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><p> <strong>语法</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码<span class="token number">1</span>    条件<span class="token number">1</span>成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">elif</span> 条件<span class="token number">2</span>：    条件<span class="token number">2</span>成立执行的代码<span class="token number">1</span>    条件<span class="token number">2</span>成立执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    以上条件都不成立执行执行的代码</code></pre><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p><p>elif 可以有多个 ，每个表示一种可能性</p></blockquote><h4 id="12-5-1-实例：工龄判断"><a href="#12-5-1-实例：工龄判断" class="headerlink" title="12.5.1 实例：工龄判断"></a>12.5.1 实例：工龄判断</h4><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入您的年龄：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},童工一枚'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},合法工龄'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的年龄是{age},可以退休'</span><span class="token punctuation">)</span></code></pre><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。 条件扩充</p></blockquote><h3 id="12-6-if嵌套"><a href="#12-6-if嵌套" class="headerlink" title="12.6 if嵌套"></a>12.6 if嵌套</h3><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><p>  <strong>语法</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 条件<span class="token number">1</span>：    条件<span class="token number">1</span>成立执行的代码    条件<span class="token number">1</span>成立执行的代码        <span class="token keyword">if</span> 条件<span class="token number">2</span>：        条件<span class="token number">2</span>成立执行的代码        条件<span class="token number">2</span>成立执行的代码    </code></pre><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h4 id="12-6-2-实例：坐公交"><a href="#12-6-2-实例：坐公交" class="headerlink" title="12.6.2 实例：坐公交"></a>12.6.2 实例：坐公交</h4><p> 判断是否能上车</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1. 如果有钱，则可以上车    2. 上车后，如果有空座，可以坐下    上车后，如果没有空座，则站着等空座位如果没钱，不能上车"""</span><span class="token comment" spellcheck="true"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span>money <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> money <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'土豪，不差钱，顺利上车'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没钱，不能上车，追着公交车跑'</span><span class="token punctuation">)</span></code></pre><p> 判断是否能坐下 ：可以画流程图</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1. 如果有钱，则可以上车    2. 上车后，如果有空座，可以坐下    上车后，如果没有空座，则站着等空座位如果没钱，不能上车"""</span><span class="token comment" spellcheck="true"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span>money <span class="token operator">=</span> <span class="token number">1</span>seat <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> money <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'土豪，不差钱，顺利上车'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> seat <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有空座，可以坐下'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有空座，站等'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没钱，不能上车，追着公交车跑'</span><span class="token punctuation">)</span></code></pre><h3 id="12-7-猜拳游戏"><a href="#12-7-猜拳游戏" class="headerlink" title="12.7 猜拳游戏"></a>12.7 猜拳游戏</h3><p>需求分析：（分析步骤）</p><ul><li><p>参与游戏的角色</p><ul><li>玩家<ul><li>手动出拳</li></ul></li><li>电脑<ul><li>随机出拳</li></ul></li></ul></li><li><p>判断输赢</p><ul><li>玩家获胜</li></ul><table><thead><tr><th>玩家</th><th>电脑</th></tr></thead><tbody><tr><td>石头</td><td>剪刀</td></tr><tr><td>剪刀</td><td>布</td></tr><tr><td>布</td><td>石头</td></tr></tbody></table><ul><li>平局<ul><li>玩家出拳 和 电脑出拳相同</li></ul></li><li>电脑获胜</li></ul></li></ul><h4 id="12-7-1-随机做法"><a href="#12-7-1-随机做法" class="headerlink" title="12.7.1 随机做法"></a>12.7.1 随机做法</h4><pre><code> 1. 导出random模块  import random 2. random.randint(开始, 结束)   int 表示整数</code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""提示：0-石头，1-剪刀，2-布1. 出拳玩家输入出拳电脑随机出拳2. 判断输赢玩家获胜平局电脑获胜"""</span><span class="token comment" spellcheck="true"># 导入random模块</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 计算电脑出拳的随机数字</span>computer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>computer<span class="token punctuation">)</span>player <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请出拳：0-石头，1-剪刀，2-布：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> computer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'玩家获胜'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 平局：玩家 == 电脑</span><span class="token keyword">elif</span> player <span class="token operator">==</span> computer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'平局'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电脑获胜'</span><span class="token punctuation">)</span></code></pre><h3 id="12-8-三目运算符"><a href="#12-8-三目运算符" class="headerlink" title="12.8  三目运算符"></a>12.8  三目运算符</h3><p>三目运算符也叫三元运算符。</p><p>语法如下：</p><pre class=" language-python"><code class="language-python">条件成立执行的表达式 <span class="token keyword">if</span> 条件 <span class="token keyword">else</span> 条件不成立执行的表达式先写<span class="token keyword">if</span> 条件， 然后把条件成立执行的表达式往前放， 条件不成立的结果往后放。 最后把整个表达式赋值</code></pre><p>快速体验：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">=</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><h2 id="十三、流程控制循环"><a href="#十三、流程控制循环" class="headerlink" title="十三、流程控制循环"></a>十三、流程控制循环</h2><h2 id="1-循环简介"><a href="#1-循环简介" class="headerlink" title="1. 循环简介"></a>1. 循环简介</h2><h3 id="1-1-循环的作用"><a href="#1-1-循环的作用" class="headerlink" title="1.1 循环的作用"></a>1.1 循环的作用</h3><blockquote><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“媳妇儿，我错了”。这个时候程序员会怎么做？</p><p>答：100遍<code>print('媳妇儿，我错了')</code></p></blockquote><blockquote><p>思考：复制粘贴100次吗？</p><p>答：重复执行100次一样的代码，程序中循环即可</p></blockquote><p>循环的作用：让代码更高效的重复执行。</p><h3 id="1-2-循环的分类"><a href="#1-2-循环的分类" class="headerlink" title="1.2 循环的分类"></a>1.2 循环的分类</h3><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h2 id="2-while的语法"><a href="#2-while的语法" class="headerlink" title="2. while的语法"></a>2. while的语法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token number">1</span>    条件成立重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h3><p>需求：复现重复执行100次<code>print('媳妇儿，我错了')</code>（输出更简洁一些，我们这里设置5次）。</p><p>分析：初始值是0次，终点是5次，重复做的事情输出“媳妇儿， 我错了”。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 循环的计数器（表示循环次数）</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 第一个数一般取0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true"># i = i + 1 (增量为1)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务结束'</span><span class="token punctuation">)</span></code></pre><h2 id="3-while的应用"><a href="#3-while的应用" class="headerlink" title="3. while的应用"></a>3. while的应用</h2><h3 id="3-1-应用一：计算1-100累加和"><a href="#3-1-应用一：计算1-100累加和" class="headerlink" title="3.1 应用一：计算1-100累加和"></a>3.1 应用一：计算1-100累加和</h3><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 用一个变量储存计算结果，循环未开始前初始值为零，每计算一次加法更新一次result变量值</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 输出5050</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h2 id="3-2-应用二：计算1-100偶数累加和"><a href="#3-2-应用二：计算1-100偶数累加和" class="headerlink" title="3.2 应用二：计算1-100偶数累加和"></a>3.2 应用二：计算1-100偶数累加和</h2><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 / 2 , 计数器每次累加2</li></ul><h3 id="3-2-1-方法一：条件判断和2取余数则累加（推荐，全自动化，不用人脑计算）"><a href="#3-2-1-方法一：条件判断和2取余数则累加（推荐，全自动化，不用人脑计算）" class="headerlink" title="3.2.1 方法一：条件判断和2取余数则累加（推荐，全自动化，不用人脑计算）"></a>3.2.1 方法一：条件判断和2取余数则累加（推荐，全自动化，不用人脑计算）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法一：条件判断和2取余数为0则累加计算</span>i <span class="token operator">=</span> <span class="token number">1</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 输出2550</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h3 id="3-2-2-方法二：计数器控制"><a href="#3-2-2-方法二：计数器控制" class="headerlink" title="3.2.2 方法二：计数器控制"></a>3.2.2 方法二：计数器控制</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法二：计数器控制增量为2</span>i <span class="token operator">=</span> <span class="token number">0</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 输出2550</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h2 id="4、break和continue"><a href="#4、break和continue" class="headerlink" title="4、break和continue"></a>4、break和continue</h2><p>break和continue是循环中满足一定条件退出循环的两种不同方式。</p><h3 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h3><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即==终止此循环==。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即退出当前一次循环继而执行下一次循环代码。</p><h3 id="4-2-情况一：break"><a href="#4-2-情况一：break" class="headerlink" title="4.2 情况一：break"></a>4.2 情况一：break</h3><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃饱了不吃了'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃了第{i}个苹果'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190124114340900.png" alt="image-20190124114340900"></p><h3 id="4-3-情况二：continue-当条件成立，退出当前一次循环，继而执行下一次循环"><a href="#4-3-情况二：continue-当条件成立，退出当前一次循环，继而执行下一次循环" class="headerlink" title="4.3 情况二：continue 当条件成立，退出当前一次循环，继而执行下一次循环"></a>4.3 情况二：continue 当条件成立，退出当前一次循环，继而执行下一次循环</h3><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'大虫子，第{i}个不吃了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在continue之前一定要修改计数器，否则会陷入死循环</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'吃了第{i}个苹果'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190124114514775.png" alt="image-20190124114514775"></p><h2 id="5-while循环嵌套"><a href="#5-while循环嵌套" class="headerlink" title="5. while循环嵌套"></a>5. while循环嵌套</h2><h3 id="5-1-应用场景"><a href="#5-1-应用场景" class="headerlink" title="5.1 应用场景"></a>5.1 应用场景</h3><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿， 我错了'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刷晚饭的碗'</span><span class="token punctuation">)</span></code></pre><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    <span class="token keyword">while</span> 条件<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿， 我错了'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刷晚饭的碗'</span><span class="token punctuation">)</span></code></pre><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h3 id="5-3-快速体验：复现场景"><a href="#5-3-快速体验：复现场景" class="headerlink" title="5.3 快速体验：复现场景"></a>5.3 快速体验：复现场景</h3><h4 id="5-3-1-代码"><a href="#5-3-1-代码" class="headerlink" title="5.3.1 代码"></a>5.3.1 代码</h4><pre class=" language-python"><code class="language-python">j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 两个变量</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'刷晚饭的碗'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'一套惩罚结束----------------'</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h4 id="5-3-2-执行结果"><a href="#5-3-2-执行结果" class="headerlink" title="5.3.2 执行结果"></a>5.3.2 执行结果</h4><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104161506542-6589706.png" alt="image-20190104161506542"></p><h4 id="5-3-3-理解执行流程"><a href="#5-3-3-理解执行流程" class="headerlink" title="5.3.3 理解执行流程"></a>5.3.3 理解执行流程</h4><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><p><img src="C:/Users/94252/Desktop/循环.assets/while2.png"></p><h2 id="6-while循环嵌套应用"><a href="#6-while循环嵌套应用" class="headerlink" title="6. while循环嵌套应用"></a>6. while循环嵌套应用</h2><h3 id="6-1-应用一：打印星号-正方形"><a href="#6-1-应用一：打印星号-正方形" class="headerlink" title="6.1 应用一：打印星号(正方形)"></a>6.1 应用一：打印星号(正方形)</h3><h4 id="6-1-1-需求"><a href="#6-1-1-需求" class="headerlink" title="6.1.1 需求"></a>6.1.1 需求</h4><pre class=" language-html"><code class="language-html">*************************</code></pre><h4 id="6-1-2-代码"><a href="#6-1-2-代码" class="headerlink" title="6.1.2 代码"></a>6.1.2 代码</h4><p>分析：一行输出5个星号，重复打印5行</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重复打印5行星星</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一行星星的打印(一行星星开始)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 一行内的星星不能换行，取消print默认结束符\n</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="6-2-应用二：打印星号-三角形"><a href="#6-2-应用二：打印星号-三角形" class="headerlink" title="6.2 应用二：打印星号(三角形)"></a>6.2 应用二：打印星号(三角形)</h2><h3 id="6-2-1-需求"><a href="#6-2-1-需求" class="headerlink" title="6.2.1 需求"></a>6.2.1 需求</h3><pre class=" language-html"><code class="language-html">***************</code></pre><h3 id="6-2-2-代码"><a href="#6-2-2-代码" class="headerlink" title="6.2.2 代码"></a>6.2.2 代码</h3><p>分析：==一行输出星星的个数和行号是相等的==，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重复打印5行星星</span><span class="token comment" spellcheck="true"># j表示行号</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一行星星的打印</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="6-3-九九乘法表"><a href="#6-3-九九乘法表" class="headerlink" title="6.3 九九乘法表"></a>6.3 九九乘法表</h2><h3 id="6-3-1-执行结果"><a href="#6-3-1-执行结果" class="headerlink" title="6.3.1 执行结果"></a>6.3.1 执行结果</h3><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104163553616-6590953.png" alt="image-20190104163553616"></p><h3 id="6-3-2-代码"><a href="#6-3-2-代码" class="headerlink" title="6.3.2 代码"></a>6.3.2 代码</h3><ol><li>打印一个乘法表达式</li><li>一行打印多个表达式  一行表达式的个数和行号相等 – 循环： 一个表达式 – 不换行</li><li>打印多行表达式 – 循环 ： 一行表达式 – 换行</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重复打印9行表达式</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印一行里面的表达式 a * b = a*b</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{i}*{j}={j*i}'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 排版，'\t'用于对齐</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h2 id="7、for循环"><a href="#7、for循环" class="headerlink" title="7、for循环"></a>7、for循环</h2><h3 id="7-1-语法"><a href="#7-1-语法" class="headerlink" title="7.1 语法"></a>7.1 语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码<span class="token number">1</span>    重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h3 id="7-2-快速体验"><a href="#7-2-快速体验" class="headerlink" title="7.2 快速体验"></a>7.2 快速体验</h3><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104164152311-6591312.png" alt="image-20190104164152311"></p><h3 id="7-3-break"><a href="#7-3-break" class="headerlink" title="7.3 break"></a>7.3 break</h3><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104165242555-6591962.png" alt="image-20190104165242555"></p><h3 id="7-4-continue"><a href="#7-4-continue" class="headerlink" title="7.4 continue"></a>7.4 continue</h3><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104165413160-6592053.png" alt="image-20190104165413160"></p><h2 id="8-else"><a href="#8-else" class="headerlink" title="8. else"></a>8. else</h2><p>循环可以和else配合使用，else下方缩进的代码指的是==当循环正常结束之后要执行的代码==。</p><h3 id="8-1-while…else"><a href="#8-1-while…else" class="headerlink" title="8.1 while…else"></a>8.1 while…else</h3><p>需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿原谅我了...'</span><span class="token punctuation">)</span></code></pre><blockquote><p>思考： 这个print是不是没有循环也能执行？</p></blockquote><h3 id="8-1-1-语法"><a href="#8-1-1-语法" class="headerlink" title="8.1.1 语法"></a>8.1.1 语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    循环正常结束之后要执行的代码</code></pre><h3 id="8-1-2-示例"><a href="#8-1-2-示例" class="headerlink" title="8.1.2 示例"></a>8.1.2 示例</h3><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span></code></pre><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190125111816497.png" alt="image-20190125111816497"></p><h3 id="8-1-3-退出循环的方式"><a href="#8-1-3-退出循环的方式" class="headerlink" title="8.1.3 退出循环的方式"></a>8.1.3 退出循环的方式</h3><p>需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><ul><li>更生气，不打算原谅，也不需要道歉了，程序如何书写？</li><li>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</li></ul><ol><li>break</li></ol><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不真诚'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span></code></pre><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190125111952693.png" alt="image-20190125111952693"></p><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><ol start="2"><li>continue</li></ol><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这遍说的不真诚'</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇儿，我错了'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'媳妇原谅我了，真开心，哈哈哈哈'</span><span class="token punctuation">)</span></code></pre><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190125112111170.png" alt="image-20190125112111170"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="8-2-for…else"><a href="#8-2-for…else" class="headerlink" title="8.2 for…else"></a>8.2 for…else</h2><h3 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1 语法"></a>8.2.1 语法</h3><p>序列是数据，可以是字符串、列表等</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">:</span>    循环正常结束之后要执行的代码</code></pre><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><h3 id="8-2-2-示例"><a href="#8-2-2-示例" class="headerlink" title="8.2.2 示例"></a>8.2.2 示例</h3><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span></code></pre><h3 id="8-2-3-退出循环的方式"><a href="#8-2-3-退出循环的方式" class="headerlink" title="8.2.3 退出循环的方式"></a>8.2.3 退出循环的方式</h3><ol><li>break终止循环</li></ol><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104165551501-6592151.png" alt="image-20190104165551501"></p><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li>continue控制循环</li></ol><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'itheima'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'遇到e不打印'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环正常结束之后执行的代码'</span><span class="token punctuation">)</span></code></pre><p>执行结果：</p><p><img src="C:/Users/94252/Desktop/循环.assets/image-20190104165714740-6592234.png" alt="image-20190104165714740"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="9-十三的总结"><a href="#9-十三的总结" class="headerlink" title="9. 十三的总结"></a>9. 十三的总结</h2><ul><li>循环的作用：控制代码重复执行</li><li>while语法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>    条件成立重复执行的代码<span class="token number">1</span>    条件成立重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>while循环嵌套语法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token number">1</span><span class="token punctuation">:</span>    条件<span class="token number">1</span>成立执行的代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> 条件<span class="token number">2</span><span class="token punctuation">:</span>        条件<span class="token number">2</span>成立执行的代码        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>for循环语法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 序列<span class="token punctuation">:</span>    重复执行的代码<span class="token number">1</span>    重复执行的代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>break退出整个循环</li><li>continue退出本次循环，继续执行下一次重复执行的代码</li><li>else<ul><li>while和for都可以配合else使用</li><li>else下方缩进的代码含义：当循环正常结束后执行的代码</li><li>break终止循环不会执行else下方缩进的代码</li><li>continue退出循环的方式执行else下方缩进的代码</li></ul></li></ul><h2 id="十四、字符串"><a href="#十四、字符串" class="headerlink" title="十四、字符串"></a>十四、字符串</h2><h3 id="1-1-认识字符串"><a href="#1-1-认识字符串" class="headerlink" title="1.1. 认识字符串"></a>1.1. 认识字符串</h3><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'hello world'</span>b <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：控制台显示结果为<code>&lt;class 'str'&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h2 id="1-1-1-字符串特征"><a href="#1-1-1-字符串特征" class="headerlink" title="1.1.1 字符串特征"></a>1.1.1 字符串特征</h2><ul><li>一对引号字符串</li></ul><pre class=" language-python"><code class="language-python">name1 <span class="token operator">=</span> <span class="token string">'Tom'</span>name2 <span class="token operator">=</span> <span class="token string">"Rose"</span></code></pre><ul><li>三引号字符串</li></ul><pre class=" language-python"><code class="language-python">name3 <span class="token operator">=</span> <span class="token triple-quoted-string string">''' Tom '''</span>name4 <span class="token operator">=</span> <span class="token triple-quoted-string string">""" Rose """</span>a <span class="token operator">=</span> <span class="token triple-quoted-string string">''' i am Tom,         nice to meet you! '''</span>b <span class="token operator">=</span> <span class="token triple-quoted-string string">""" i am Rose,         nice to meet you! """</span></code></pre><blockquote><p>注意：三引号形式的字符串支持换行。</p></blockquote><blockquote><p>思考：如果创建一个字符串<code> I'm Tom</code>? （系统不知道应该把哪组单引号算一对，用双引也可以用斜杠分隔开）</p></blockquote><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> <span class="token string">"I'm Tom"</span>d <span class="token operator">=</span> <span class="token string">'I\'m Tom'</span></code></pre><h2 id="1-1-2-字符串输出"><a href="#1-1-2-字符串输出" class="headerlink" title="1.1.2 字符串输出"></a>1.1.2 字符串输出</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我的名字是%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{name}'</span><span class="token punctuation">)</span></code></pre><h2 id="1-1-3-字符串输入"><a href="#1-1-3-字符串输入" class="headerlink" title="1.1.3 字符串输入"></a>1.1.3 字符串输入</h2><p>在Python中，使用<code>input()</code>接收用户输入。</p><ul><li>代码</li></ul><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的名字：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的名字是{name}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您的密码：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的密码是{password}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-下标"><a href="#2-下标" class="headerlink" title="2.下标"></a>2.下标</h3><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><h3 id="2-1-快速体验-1"><a href="#2-1-快速体验-1" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h3><p>需求：字符串<code>name = "abcdef"</code>，取到不同下标对应的数据。</p><ul><li>代码</li></ul><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：下标从==0==开始。</p></blockquote><h3 id="3-切片"><a href="#3-切片" class="headerlink" title="3.切片"></a>3.切片</h3><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><pre class=" language-python"><code class="language-python">序列<span class="token punctuation">[</span>开始位置下标<span class="token punctuation">:</span>结束位置下标<span class="token punctuation">:</span>步长<span class="token punctuation">]</span></code></pre><blockquote><p>注意</p></blockquote><pre><code> 1. 不包含结束位置下标对应的数据， 正负整数均可； 2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><h3 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h3><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcde</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># bcdefg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcdefg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># aceg</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># abcdef, 负1表示倒数第一个数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># def</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># gfedcba</span></code></pre><h2 id="4-常用操作方法"><a href="#4-常用操作方法" class="headerlink" title="4.常用操作方法"></a>4.常用操作方法</h2><p>字符串的常用操作方法有查找、修改和判断三大类。</p><h3 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h3><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>find<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span></code></pre><ul><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>index<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 12</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 23</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错</span></code></pre><ul><li>rfind()： 和find()功能相同，但查找方向为==右侧==开始。</li><li>rindex()：和index()功能相同，但查找方向为==右侧==开始。</li><li>count()：返回某个子串在字符串中出现的次数</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>count<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'ands'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><h3 id="4-2-修改"><a href="#4-2-修改" class="headerlink" title="4.2 修改"></a>4.2 修改</h3><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><ul><li>replace()：替换</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>旧子串<span class="token punctuation">,</span> 新子串<span class="token punctuation">,</span> 替换次数<span class="token punctuation">)</span></code></pre><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：hello world he itcast he itheima he Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：hello world he itcast he itheima he Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'he'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：hello world and itcast and itheima and Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span></code></pre><blockquote><p>注意：数据按照是否能直接修改分为==可变类型==和==不可变类型==两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>split<span class="token punctuation">(</span>分割字符<span class="token punctuation">,</span> num<span class="token punctuation">)</span></code></pre><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：['hello world ', ' itcast ', ' itheima ', ' Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['hello world ', ' itcast ', ' itheima and Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['hello', 'world', 'and', 'itcast', 'and', 'itheima', 'and', 'Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['hello', 'world', 'and itcast and itheima and Python']</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符或子串<span class="token punctuation">.</span>join<span class="token punctuation">(</span>多字符串组成的序列<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chuan'</span><span class="token punctuation">,</span> <span class="token string">'zhi'</span><span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">,</span> <span class="token string">'ke'</span><span class="token punctuation">]</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'ddd'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：chuan_zhi_bo_ke</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：aa...b...cc...ddd</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>capitalize()：将字符串第一个字符转换成大写。</li></ul><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：Hello world and itcast and itheima and python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul><li>title()：将字符串每个单词首字母转换成大写。</li></ul><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：Hello World And Itcast And Itheima And Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>lower()：将字符串中大写转小写。</li></ul><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：hello world and itcast and itheima and python</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>upper()：将字符串中小写转大写。</li></ul><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>lstrip()：删除字符串左侧空白字符。</p></li><li><p>rstrip()：删除字符串右侧空白字符。</p></li><li><p>strip()：删除字符串两侧空白字符。</p></li><li><p>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</p></li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>长度<span class="token punctuation">,</span> 填充字符<span class="token punctuation">)</span></code></pre><ul><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li></ul><h3 id="4-3-判断"><a href="#4-3-判断" class="headerlink" title="4.3 判断"></a>4.3 判断</h3><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><ul><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python   "</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">字符串序列<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>子串<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">mystr <span class="token operator">=</span> <span class="token string">"hello world and itcast and itheima and Python"</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li></ul><pre class=" language-python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'hello'</span>mystr2 <span class="token operator">=</span> <span class="token string">'hello12345'</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li></ul><pre class=" language-python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'aaa12345'</span>mystr2 <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token comment" spellcheck="true"># 结果： False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li></ul><pre class=" language-python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'aaa12345'</span>mystr2 <span class="token operator">=</span> <span class="token string">'12345-'</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li></ul><pre class=" language-python"><code class="language-python">mystr1 <span class="token operator">=</span> <span class="token string">'1 2 3 4 5'</span>mystr2 <span class="token operator">=</span> <span class="token string">'     '</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr2<span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十五、列表"><a href="#十五、列表" class="headerlink" title="十五、列表"></a>十五、列表</h2><h3 id="1-列表的应用场景"><a href="#1-列表的应用场景" class="headerlink" title="1.列表的应用场景"></a>1.列表的应用场景</h3><p>思考：有一个人的姓名(TOM)怎么书写存储程序？</p><p>答：变量。</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？</p><p>答：列表即可， 列表一次性可以存储多个数据。</p><h3 id="2-列表的格式"><a href="#2-列表的格式" class="headerlink" title="2. 列表的格式"></a>2. 列表的格式</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">,</span> 数据<span class="token number">3</span><span class="token punctuation">,</span> 数据<span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><h3 id="3-列表的常用操作"><a href="#3-列表的常用操作" class="headerlink" title="3. 列表的常用操作"></a>3. 列表的常用操作</h3><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h3 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h3><h4 id="3-1-1-下标"><a href="#3-1-1-下标" class="headerlink" title="3.1.1 下标"></a>3.1.1 下标</h4><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Lily</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Rose</span></code></pre><h4 id="3-1-2-函数"><a href="#3-1-2-函数" class="headerlink" title="3.1.2 函数"></a>3.1.2 函数</h4><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>index<span class="token punctuation">(</span>数据<span class="token punctuation">,</span> 开始位置下标<span class="token punctuation">,</span> 结束位置下标<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'Lily'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span></code></pre><h3 id="3-1-3-判断是否存在"><a href="#3-1-3-判断是否存在" class="headerlink" title="3.1.3 判断是否存在"></a>3.1.3 判断是否存在</h3><ul><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lily'</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lilys'</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span></code></pre><ul><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lily'</span> <span class="token operator">not</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Lilys'</span> <span class="token operator">not</span> <span class="token keyword">in</span> name_list<span class="token punctuation">)</span></code></pre><ul><li>体验案例</li></ul><p>需求：查找用户输入的名字是否已经存在。</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要搜索的名字：'</span><span class="token punctuation">)</span><span class="token keyword">if</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的名字是{name}, 名字已经存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您输入的名字是{name}, 名字不存在'</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-增加"><a href="#3-2-增加" class="headerlink" title="3.2 增加"></a>3.2 增加</h3><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>append<span class="token punctuation">(</span>数据<span class="token punctuation">)</span></code></pre><ol start="2"><li>体验</li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，<strong>故列表为可变类型数据。</strong></p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily', 'Rose', ['xiaoming', 'xiaohong']]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>数据<span class="token punctuation">)</span></code></pre><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily', 'Rose', 'x', 'i', 'a', 'o', 'm', 'i', 'n', 'g']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><p>​2.2 序列数据</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'xiaoming'</span><span class="token punctuation">,</span> <span class="token string">'xiaohong'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily', 'Rose', 'xiaoming', 'xiaohong']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>位置下标<span class="token punctuation">,</span> 数据<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'xiaoming'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'xiaoming', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><h3 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h3><ul><li>del</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> 目标</code></pre><ol start="2"><li><p>快速体验</p><p>2.1 删除列表</p></li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：报错提示：name 'name_list' is not defined</span><span class="token keyword">del</span> name_list<span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><p>​2.2 删除指定数据</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">del</span> name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：['Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>下标<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>del_name <span class="token operator">=</span> name_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 可以用一个值接收这个指定删除的数据</span><span class="token comment" spellcheck="true"># 结果：Lily</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>数据<span class="token punctuation">)</span></code></pre><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>clear()：清空列表</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果： []</span></code></pre><h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><ul><li>修改指定下标数据</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token comment" spellcheck="true"># 结果：['aaa', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span></code></pre><ul><li>逆置：reverse()</li></ul><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：[8, 6, 3, 2, 5, 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span></code></pre><ul><li>排序：sort()</li></ul><ol><li>语法</li></ol><pre class=" language-python"><code class="language-python">列表序列<span class="token punctuation">.</span>sort<span class="token punctuation">(</span> key<span class="token operator">=</span>None<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：reverse表示排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</p></blockquote><ol start="2"><li>快速体验</li></ol><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：[1, 2, 3, 5, 6, 8]</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span></code></pre><h3 id="3-5-复制"><a href="#3-5-复制" class="headerlink" title="3.5 复制"></a>3.5 复制</h3><p>函数：copy()</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>name_li2 <span class="token operator">=</span> name_list<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果：['Tom', 'Lily', 'Rose']</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_li2<span class="token punctuation">)</span></code></pre><h2 id="4-列表的循环遍历"><a href="#4-列表的循环遍历" class="headerlink" title="4. 列表的循环遍历"></a>4. 列表的循环遍历</h2><p>需求：依次打印列表中的各个数据。</p><h3 id="4-1-while"><a href="#4-1-while" class="headerlink" title="4.1 while"></a>4.1 while</h3><ul><li>代码</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><h3 id="4-2-for"><a href="#4-2-for" class="headerlink" title="4.2 for"></a>4.2 for</h3><ul><li>代码</li></ul><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><ul><li>执行结果</li><li>Tom</li><li>Lily</li><li>Rose          <strong>(通常用for进行遍历)</strong></li></ul><h2 id="5-列表嵌套"><a href="#5-列表嵌套" class="headerlink" title="5. 列表嵌套"></a>5. 列表嵌套</h2><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><pre class=" language-python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'小红'</span><span class="token punctuation">,</span> <span class="token string">'小绿'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步：按下标查找到李四所在的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="6-综合应用-–-随机分配办公室"><a href="#6-综合应用-–-随机分配办公室" class="headerlink" title="6. 综合应用 – 随机分配办公室"></a>6. 综合应用 – 随机分配办公室</h2><p>需求：有三个办公室，8位老师，8位老师随机分配到3个办公室</p><p>步骤：1.准备数据 </p><p>​           1.1 8位老师 – 列表</p><p>​           1.2 3个办公室 – 列表嵌套</p><p>​            2.分配老师到办公室（随机分配）</p><p>​            就是把老师的名字写入到办公室列表 – 办公室列表追加老师名字数据</p><p>​            3.验证是否分配成功 （打印办公室详细信息：每个办公室的人数和对应老师的名字）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomteachers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">]</span>offices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 分配老师到办公室 -- 取到每个老师放到办公室列表 -- 遍历老师列表数据 for</span><span class="token keyword">for</span> name <span class="token keyword">in</span> teachers<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 列表追加数据 append（结尾追加整体） extend(结尾追加单个) insert</span>    <span class="token comment" spellcheck="true"># xx[0] -- 不能指定某个下标 -- 随机</span>    num <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    offices<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 遍历到谁我就追加谁</span> <span class="token comment" spellcheck="true"># 验证是否成功 给各个办公室子列表加一个办公室编号 1、2、3</span>i <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> office <span class="token keyword">in</span> offices<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打印办公室人数 -- 子列表数据的个数 -- len()</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f'办公室<span class="token punctuation">{</span>i<span class="token punctuation">}</span>的人数是<span class="token punctuation">{</span>len<span class="token punctuation">(</span>office<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> name <span class="token keyword">in</span> office<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>i <span class="token operator">+=</span> <span class="token number">1</span>                   </code></pre><h2 id="十六、元组"><a href="#十六、元组" class="headerlink" title="十六、元组"></a>十六、元组</h2><h3 id="1-元组的应用场景"><a href="#1-元组的应用场景" class="headerlink" title="1.元组的应用场景"></a>1.元组的应用场景</h3><p>思考：如果想要存储多个数据，但是这些数据是不能修改的数据，怎么做？</p><p>答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span></code></pre><p>一个元组可以存储多个数据，元组内的数据是不能修改的。</p><h3 id="2-定义元组"><a href="#2-定义元组" class="headerlink" title="2. 定义元组"></a>2. 定义元组</h3><p>元组特点：定义元组使用==小括号==，且逗隔开各个数据，数据可以是不同的数据类型。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 多个数据元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 单个数据元组</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型</p></blockquote><pre class=" language-python"><code class="language-python">t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># tuple</span>t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># int</span>t4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># str</span></code></pre><h3 id="3-元组的常见操作"><a href="#3-元组的常见操作" class="headerlink" title="3. 元组的常见操作"></a>3. 元组的常见操作</h3><p>元组数据不支持修改，只支持查找，具体如下：</p><ul><li>按下标查找数据</li></ul><pre class=" language-python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># aa</span></code></pre><ul><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</li></ul><pre class=" language-python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span></code></pre><ul><li>count()：统计某个数据在当前元组出现的次数。</li></ul><pre class=" language-python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span></code></pre><ul><li>len()：统计元组中数据的个数。</li></ul><pre class=" language-python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span></code></pre><blockquote><p>注意：元组内的直接数据如果修改则立即报错</p></blockquote><pre class=" language-python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">)</span>tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaa'</span></code></pre><blockquote><p>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</p></blockquote><pre class=" language-python"><code class="language-python">tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问到列表</span><span class="token comment" spellcheck="true"># 结果：(10, 20, ['aaaaa', 'bb', 'cc'], 50, 30)</span>tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'aaaaa'</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span></code></pre><h2 id="十七、字典"><a href="#十七、字典" class="headerlink" title="十七、字典"></a>十七、字典</h2><h3 id="1-字典的应用场景"><a href="#1-字典的应用场景" class="headerlink" title="1.字典的应用场景"></a>1.字典的应用场景</h3><p>思考1： 如果有多个数据，例如：’Tom’, ‘男’, 20，如何快速存储？</p><p>答：列表</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span></code></pre><p>思考2：如何查找到数据’Tom’？</p><p>答：查找到下标为0的数据即可。</p><pre class=" language-python"><code class="language-python">list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>思考3：如果将来数据顺序发生变化，如下所示，还能用<code>list1[0]</code>访问到数据’Tom’吗？。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">]</span></code></pre><p>答：不能，数据’Tom’此时下标为2。</p><p>思考4：数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据顺序变化前后能使用同一的标准查找数据呢？</p><p>答：字典，字典里面的数据是以键值对形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><h3 id="2-创建字典的语法"><a href="#2-创建字典的语法" class="headerlink" title="2. 创建字典的语法"></a>2. 创建字典的语法</h3><p>字典特点：</p><ul><li>符号为大括号</li><li>数据为键值对形式出现</li><li>各个键值对之间用逗号隔开</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 有数据字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 空字典</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict3 <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote><h3 id="3-字典常见操作"><a href="#3-字典常见操作" class="headerlink" title="3. 字典常见操作"></a>3. 字典常见操作</h3><h4 id="3-1-增"><a href="#3-1-增" class="headerlink" title="3.1 增"></a>3.1 增</h4><p>写法：字典序列[key] = 值</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>dict1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Rose'</span><span class="token comment" spellcheck="true"># 结果：{'name': 'Rose', 'age': 20, 'gender': '男'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>dict1<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">110</span><span class="token comment" spellcheck="true"># {'name': 'Rose', 'age': 20, 'gender': '男', 'id': 110}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></code></pre><blockquote><p>注意：字典为可变类型。</p></blockquote><h4 id="3-2-删"><a href="#3-2-删" class="headerlink" title="3.2 删"></a>3.2 删</h4><ul><li>del() / del：删除字典或删除字典中指定键值对。</li></ul><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 结果：{'name': 'Tom', 'age': 20}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></code></pre><ul><li>clear()：清空字典</li></ul><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>dict1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {}</span></code></pre><h4 id="3-3-改"><a href="#3-3-改" class="headerlink" title="3.3 改"></a>3.3 改</h4><p>写法：字典序列[key] = 值</p><blockquote><p>注意：如果key存在则修改这个key对应的值&nbsp;；如果key不存在则新增此键值对。</p></blockquote><h3 id="3-4-查"><a href="#3-4-查" class="headerlink" title="3.4 查"></a>3.4 查</h3><h4 id="3-4-1-key值查找"><a href="#3-4-1-key值查找" class="headerlink" title="3.4.1 key值查找"></a>3.4.1 key值查找</h4><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错</span></code></pre><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><h4 id="3-4-2-get"><a href="#3-4-2-get" class="headerlink" title="3.4.2 get()"></a>3.4.2 get()</h4><ul><li>语法</li></ul><pre class=" language-python"><code class="language-python">字典序列<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> 默认值<span class="token punctuation">)</span></code></pre><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(第二个参数指默认值)，如果省略第二个参数，则返回None。</p></blockquote><ul><li>快速体验</li></ul><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 110</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># None</span></code></pre><h4 id="3-4-3-keys"><a href="#3-4-3-keys" class="headerlink" title="3.4.3 keys()"></a>3.4.3 keys()</h4><p>查找字典中所有的key， 返回可迭代对象（可以用for遍历的对象）</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict_keys(['name', 'age', 'gender'])</span></code></pre><h4 id="3-4-4-values"><a href="#3-4-4-values" class="headerlink" title="3.4.4 values()"></a>3.4.4 values()</h4><p>返回可迭代对象</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict_values(['Tom', 20, '男'])</span></code></pre><h4 id="3-4-5-items"><a href="#3-4-5-items" class="headerlink" title="3.4.5 items()"></a>3.4.5 items()</h4><p>查找字典中所有的键值对， 返回可迭代对象， 里面的数据是元组， 元组的数据1是字典的key， 元组的数据2是字典key的值</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict_items([('name', 'Tom'), ('age', 20), ('gender', '男')])</span></code></pre><h2 id="4-字典的循环遍历"><a href="#4-字典的循环遍历" class="headerlink" title="4. 字典的循环遍历"></a>4. 字典的循环遍历</h2><h3 id="4-1-遍历字典的key"><a href="#4-1-遍历字典的key" class="headerlink" title="4.1 遍历字典的key"></a>4.1 遍历字典的key</h3><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></code></pre><h3 id="4-2-遍历字典的value"><a href="#4-2-遍历字典的value" class="headerlink" title="4.2 遍历字典的value"></a>4.2 遍历字典的value</h3><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre><h3 id="4-3-遍历字典的元素"><a href="#4-3-遍历字典的元素" class="headerlink" title="4.3 遍历字典的元素"></a>4.3 遍历字典的元素</h3><p>元素指键值对</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> item <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p>执行结果：（’name’, ‘Tom’） ect.</p><p>​                    </p><h3 id="4-4-遍历字典的键值对"><a href="#4-4-遍历字典的键值对" class="headerlink" title="4.4 遍历字典的键值对"></a>4.4 遍历字典的键值对</h3><p>用两个临时变量做接收， 拆包,  组合带格式输出（有两个数据的元组）</p><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{key} = {value}'</span><span class="token punctuation">)</span>执行结果：name <span class="token operator">=</span> Tom</code></pre><h2 id="十八、集合"><a href="#十八、集合" class="headerlink" title="十八、集合"></a>十八、集合</h2><h3 id="1-创建集合"><a href="#1-创建集合" class="headerlink" title="1. 创建集合"></a>1. 创建集合</h3><p>创建集合使用<code>{}</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>{}</code>用来创建空字典。</p><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s3 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abcdefg'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 将数据拆开为单个字母，无序保存</span><span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>s4 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># set</span>s5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dict</span></code></pre><blockquote><p>特点：</p><ol><li>集合可以去掉重复数据；（作用：去重）</li><li>集合数据是无序的，故不支持下标</li></ol></blockquote><h3 id="2-集合常见操作方法"><a href="#2-集合常见操作方法" class="headerlink" title="2. 集合常见操作方法"></a>2. 集合常见操作方法</h3><h4 id="2-1-增加数据"><a href="#2-1-增加数据" class="headerlink" title="2.1 增加数据"></a>2.1 增加数据</h4><ul><li>add()   用于追加单一数据（不能是序列）</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {100, 10, 20}</span></code></pre><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><ul><li>update(), 追加的数据是序列。 列表、字符串</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># s1.update(100)  # 报错</span>s1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><h4 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h4><ul><li>remove()，删除集合中的指定数据，如果数据不存在则报错。</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span>s1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><ul><li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span>s1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>s1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><ul><li>pop()，随机删除集合中的某个数据，并返回这个数据。    可用一个变量接收这个被删除数据</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span>del_num <span class="token operator">=</span> s1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>del_num<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><h4 id="2-3-查找数据"><a href="#2-3-查找数据" class="headerlink" title="2.3 查找数据"></a>2.3 查找数据</h4><ul><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列</li><li>返回结果 Ture or False</li></ul><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">not</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span></code></pre><h2 id="十九、公共操作"><a href="#十九、公共操作" class="headerlink" title="十九、公共操作"></a>十九、公共操作</h2><p>学过的数据类型基本上都支持的操作</p><h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">支持的容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">in</td><td align="center">元素是否存在</td><td align="center">字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td align="center">元素是否不存在</td><td align="center">字符串、列表、元组、字典</td></tr></tbody></table><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1 +"></a>1.1 +</h4><p>字典不支持合并运算</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串 </span>str1 <span class="token operator">=</span> <span class="token string">'aa'</span>str2 <span class="token operator">=</span> <span class="token string">'bb'</span>str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># aabb</span><span class="token comment" spellcheck="true"># 2. 列表 </span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>list3 <span class="token operator">=</span> list1 <span class="token operator">+</span> list2<span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 2, 10, 20]</span><span class="token comment" spellcheck="true"># 3. 元组 </span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (10, 20, 100, 200)</span><span class="token comment" spellcheck="true"># 或者直接 print(t1 + t2)</span></code></pre><h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2 *"></a>1.2 *</h4><p>字典不支持复制运算</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ----------</span><span class="token comment" spellcheck="true"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['hello', 'hello', 'hello', 'hello']</span><span class="token comment" spellcheck="true"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('world', 'world', 'world', 'world')</span></code></pre><h4 id="1-3-in或not-in"><a href="#1-3-in或not-in" class="headerlink" title="1.3 in或not in"></a>1.3 in或not in</h4><p>判断指定的元素是否存在</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">in</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">not</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aa'</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'aa'</span> <span class="token operator">not</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># 4. 字典类似</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> dict1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token operator">not</span> <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2-公共方法"><a href="#2-公共方法" class="headerlink" title="2. 公共方法"></a>2. 公共方法</h2><p>学过的数据类型都能使用的公共函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，成为可迭代对象，供for循环使用（切片，不包含end的结束位）</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h3 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 3. 元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 4. 集合</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 5. 字典</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2  （两个键值对）</span></code></pre><h3 id="2-2-del"><a href="#2-2-del" class="headerlink" title="2.2 del()"></a>2.2 del()</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">del</span> str1<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回结果： str1 is not defined</span><span class="token comment" spellcheck="true"># 2. 列表 (可以删整个列表，也可以删指定下标的数据)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">del</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [20, 30, 40]</span></code></pre><h3 id="2-3-max"><a href="#2-3-max" class="headerlink" title="2.3 max()"></a>2.3 max()</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># g</span><span class="token comment" spellcheck="true"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 40</span></code></pre><h3 id="2-4-min"><a href="#2-4-min" class="headerlink" title="2.4 min()"></a>2.4 min()</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 字符串</span>str1 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a</span><span class="token comment" spellcheck="true"># 2. 列表</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 10</span></code></pre><h3 id="2-5-range"><a href="#2-5-range" class="headerlink" title="2.5 range()"></a>2.5 range()</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 2 3 4 5 6 7 8 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 配合for去遍历</span><span class="token comment" spellcheck="true"># 1 3 5 7 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0 1 2 3 4 5 6 7 8 9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 没写开始，从0开始    不写步长，默认为1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote><h3 id="2-6-enumerate"><a href="#2-6-enumerate" class="headerlink" title="2.6 enumerate()"></a>2.6 enumerate()</h3><p>enumerate 的意思是数、列举</p><p>返回结果是元组， 元组的第一个数据是原迭代的数据对应的下标， 元组的第二个数据是原迭代的数据</p><ul><li>语法</li></ul><pre class=" language-python"><code class="language-python">enumerate<span class="token punctuation">(</span>可遍历对象<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。可以省略</p><p>可以按需求去更改，比如按习惯，学生编号的起始值为1，可以写 start=1</p></blockquote><ul><li>快速体验</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'下标是{index}, 对应的字符是{char}'</span><span class="token punctuation">)</span></code></pre><h2 id="3-容器类型转换"><a href="#3-容器类型转换" class="headerlink" title="3. 容器类型转换"></a>3. 容器类型转换</h2><p>用函数，将接收数据转换成需求对应的数据类型</p><h3 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h3><p>作用：将某个序列转换成元组</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h3><p>作用：将某个序列转换成列表</p><pre class=" language-python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h3><p>作用：将某个序列转换成集合</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：</p></blockquote><pre><code> 1. 集合可以快速完成列表去重 2. 集合不支持下标 没有顺序</code></pre><h2 id="二十、推导式"><a href="#二十、推导式" class="headerlink" title="二十、推导式"></a>二十、推导式</h2><h3 id="1-列表推导式"><a href="#1-列表推导式" class="headerlink" title="1. 列表推导式"></a>1. 列表推导式</h3><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</p><p>化简代码， 创建控制有规律的列表</p><p>有规律的：列表内的数据是有规律的</p><p>列表推导式又叫列表生成式。</p><h4 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h4><p>需求：创建一个0-10的列表。</p><ul><li>while循环实现</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 准备一个空列表， 等待将来放数据</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 2. 书写循环，用循环找数据，依次追加数字到空列表list1中</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><ul><li>for循环实现</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><ul><li>列表推导式实现</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 第一个i是推导式的返回值（返回值往for左面填）, 第二个i是range(10)取到的数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><h4 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h4><p>需求：创建0-10的偶数列表</p><ul><li>方法一：range()步长实现</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><ul><li>方法二：if实现</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><h4 id="1-3-多个for循环实现列表推导式"><a href="#1-3-多个for循环实现列表推导式" class="headerlink" title="1.3 多个for循环实现列表推导式"></a>1.3 多个for循环实现列表推导式</h4><p>需求：创建列表如下：</p><p>每个元组里的数据都是有规律的，分组， 前三个元组第一个数据是1， 后三个元组第1个数据是2， 第二个数据012循环2次</p><p>for循环嵌套 改写为多个for循环实现的列表推导式</p><p>怎么拿到数据1： range(1,3)</p><p>怎么拿到数据2： range(3)</p><p>for循环嵌套的写法</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 列表里面追加元组：循环前准备一个空列表， 倒推</span>        list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</code></pre><ul><li>代码如下：</li></ul><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 从for开始抄数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre><h3 id="2-字典推导式"><a href="#2-字典推导式" class="headerlink" title="2. 字典推导式"></a>2. 字典推导式</h3><p>思考：如果有如下两个列表：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">]</span></code></pre><p>如何快速合并为一个字典？</p><p>答：字典推导式</p><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><h4 id="2-1-快速体验-2"><a href="#2-1-快速体验-2" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h4><ol><li><p>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</p><p>先取到数据（用for in range）， 要什么样的返回值，按格式写道for前面</p></li></ol><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true"># i: i**2 键值对形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {1: 1, 2: 4, 3: 9, 4: 16}</span></code></pre><ol start="2"><li>将两个列表合并为一个字典</li></ol><p>如果两个列表数据个数相同， len统计任何一个列表长度都可以</p><p>如果两个列表数据个数不同， len统计数据多的列表的数据个数会报错， 应该统计数据少的那个列表      </p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'man'</span><span class="token punctuation">]</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span>list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># len(list1)返回的数据是3 （可以变化的数据，不写死）</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span></code></pre><ol start="3"><li>提取字典中目标数据</li></ol><pre class=" language-python"><code class="language-python">counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'MBP'</span><span class="token punctuation">:</span> <span class="token number">268</span><span class="token punctuation">,</span> <span class="token string">'HP'</span><span class="token punctuation">:</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token string">'DELL'</span><span class="token punctuation">:</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">'Lenovo'</span><span class="token punctuation">:</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token string">'acer'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 需求：提取上述电脑数量大于等于200的字典数据</span>count1 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">>=</span> <span class="token number">200</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true"># ().items查找键值对并返回， 迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span>count1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'MBP': 268, 'DELL': 201}</span></code></pre><h3 id="3-集合推导式"><a href="#3-集合推导式" class="headerlink" title="3. 集合推导式"></a>3. 集合推导式</h3><p>需求：创建一个集合，数据为下方列表的2次方。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><p>代码如下：</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>set1 <span class="token operator">=</span> <span class="token punctuation">{</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {1, 4}</span></code></pre><blockquote><p>注意：集合有数据去重功能。</p></blockquote><h2 id="二十一、函数"><a href="#二十一、函数" class="headerlink" title="二十一、函数"></a>二十一、函数</h2><h3 id="1-函数的作用"><a href="#1-函数的作用" class="headerlink" title="1. 函数的作用"></a>1. 函数的作用</h3><p>需求：用户到ATM机取钱：</p><ol><li>输入密码后显示”选择功能”界面 （选择服务项目，选择功能界面，显示用print,函数可以重复显示，不需要多次复制print）</li><li>查询余额后显示”选择功能”界面</li><li>取2000钱后显示”选择功能”界面</li></ol><blockquote><p>特点：显示“选择功能”界面需要重复输出给用户，怎么实现？</p></blockquote><p>函数就是将一段具有独立功能的代码块 整合到一个整体并命名，在需要的位置调用这个名称即可完成对应的需求。</p><blockquote><p>函数在开发过程中，可以更高效的实现代码重用。</p></blockquote><h3 id="2-函数的使用步骤"><a href="#2-函数的使用步骤" class="headerlink" title="2. 函数的使用步骤"></a>2. 函数的使用步骤</h3><h4 id="2-1-定义函数"><a href="#2-1-定义函数" class="headerlink" title="2.1 定义函数"></a>2.1 定义函数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span>    代码<span class="token number">1</span>    代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="2-2-调用函数"><a href="#2-2-调用函数" class="headerlink" title="2.2 调用函数"></a>2.2 调用函数</h4><pre class=" language-python"><code class="language-python">函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><blockquote><p>注意：</p></blockquote><pre><code> 1. 不同的需求，参数可有可无。 2. 在Python中，函数必须先定义后使用。</code></pre><h4 id="2-3-快速体验"><a href="#2-3-快速体验" class="headerlink" title="2.3 快速体验"></a>2.3 快速体验</h4><p>需求：复现ATM取钱功能。</p><ol><li>搭建整体框架(复现需求)</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码正确登录成功'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询余额完毕'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取了2000元钱'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面</span></code></pre><ol start="2"><li>确定“选择功能”界面内容</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询余额'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'存款'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取款'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>封装”选择功能”</li></ol><blockquote><p>注意：一定是先定义函数，后调用函数。</p><p>如果定义了函数，没有调用，函数里的代码不会执行；调用之后，返回定义函数执行下方缩进的代码</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 封装ATM机功能选项 -- 定义函数</span><span class="token keyword">def</span> <span class="token function">select_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----请选择功能-----'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询余额'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'存款'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取款'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----请选择功能-----'</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>调用函数</li></ol><p>在需要显示“选择功能”函数的位置调用函数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码正确登录成功'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面 -- 调用函数</span>select_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询余额完毕'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面 -- 调用函数</span>select_func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'取了2000元钱'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示"选择功能"界面 -- 调用函数</span>select_func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-函数的参数作用"><a href="#3-函数的参数作用" class="headerlink" title="3.函数的参数作用"></a>3.函数的参数作用</h3><p>这是最简单的参数写法！</p><p>思考：完成需求如下：一个函数完成两个数1和2的加法运算，如何书写程序？</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数</span><span class="token keyword">def</span> <span class="token function">add_num1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数</span>add_num1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>思考：上述add_num1函数只能完成数字1和2的加法运算，如果想要这个函数变得更灵活，可以计算任何用户指定的两个数字的和，如何书写程序？</p><p>分析：用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参（等待接收数据的参数）</span><span class="token keyword">def</span> <span class="token function">add_num2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> a <span class="token operator">+</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用函数时传入了真实的数据10 和 20，真实数据为实参 （定义函数有两个参数， 传入数据也要有两个）</span>add_num2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="4-函数的返回值作用"><a href="#4-函数的返回值作用" class="headerlink" title="4.函数的返回值作用"></a>4.函数的返回值作用</h3><p>最简单的，只是介绍一下</p><p>例如：我们去超市购物，比如买烟，给钱之后，是不是售货员会返回给我们烟这个商品，在函数中，如果需要返回结果给用户需要使用函数返回值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'烟'</span><span class="token comment" spellcheck="true"># 使用变量接收保存函数返回值</span>goods <span class="token operator">=</span> buy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span></code></pre><h4 id="4-1-应用"><a href="#4-1-应用" class="headerlink" title="4.1 应用"></a>4.1 应用</h4><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。（返回计算结果）</p><p>定义函数： 2个参数 和 return返回值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token comment" spellcheck="true"># 用result变量保存函数返回值</span>result <span class="token operator">=</span> sum_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><pre><code>return 作用：1. 负责函数返回值2. 退出当前函数：导致return下方的所有代码（函数体内部）不执行</code></pre><h3 id="5-函数的说明文档"><a href="#5-函数的说明文档" class="headerlink" title="5.函数的说明文档"></a>5.函数的说明文档</h3><p>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？</p><p>答：注释</p><p>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？</p><p>答：函数的说明文档</p><blockquote><p>函数的说明文档也叫函数的文档说明。</p></blockquote><h4 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h4><ul><li>定义函数的说明文档</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 说明文档的位置 """</span>    代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>查看函数的说明文档</li></ul><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span>函数名<span class="token punctuation">)</span></code></pre><h4 id="5-2-快速体验"><a href="#5-2-快速体验" class="headerlink" title="5.2 快速体验"></a>5.2 快速体验</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 求和函数 """</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> bhelp<span class="token punctuation">(</span>sum_num<span class="token punctuation">)</span></code></pre><p>高级写法：加注释号后直接敲回车，会显示各个参数，让你往后填信息</p><h3 id="6-函数嵌套调用"><a href="#6-函数嵌套调用" class="headerlink" title="6.函数嵌套调用"></a>6.函数嵌套调用</h3><p>所谓函数嵌套调用指的是一个函数里面又调用了另外一个函数。</p><p>在A里面嵌套调用B，化简代码</p><ul><li>示例</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---- testB start----'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这里是testB函数执行的代码...(省略)...'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---- testB end----'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---- testA start----'</span><span class="token punctuation">)</span>    testB<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---- testA end----'</span><span class="token punctuation">)</span>testA<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>执行流程</li></ul><blockquote><ul><li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</li></ul></blockquote><h3 id="7-函数应用"><a href="#7-函数应用" class="headerlink" title="7. 函数应用"></a>7. 函数应用</h3><h4 id="7-1-打印图形"><a href="#7-1-打印图形" class="headerlink" title="7.1 打印图形"></a>7.1 打印图形</h4><ol><li>打印一条横线</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>print_line<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>打印多条横线</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_lines</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>        print_line<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>print_lines<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h4 id="7-2-函数计算"><a href="#7-2-函数计算" class="headerlink" title="7.2 函数计算"></a>7.2 函数计算</h4><ol><li><p>求三个数之和</p><p>函数返回值是返回到函数调用的地方</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> cresult <span class="token operator">=</span> sum_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 6</span></code></pre><ol start="2"><li>求三个数平均值</li></ol><p>函数嵌套，调用求和的结果再除以三</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">average_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    sumResult <span class="token operator">=</span> sum_num<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 拿返回值保存</span>    <span class="token keyword">return</span> sumResult <span class="token operator">/</span> <span class="token number">3</span>result <span class="token operator">=</span> average_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.0</span></code></pre><h3 id="8-总结1"><a href="#8-总结1" class="headerlink" title="8. 总结1"></a>8. 总结1</h3><ul><li><p>函数的作用：封装代码，高效的代码重用</p></li><li><p>函数使用步骤</p><ul><li>定义函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    代码<span class="token number">1</span>    代码<span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>调用函数</li></ul><pre class=" language-python"><code class="language-python">函数名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</p><ul><li>形参：函数定义时书写的参数(非真实数据)</li><li>实参：函数调用时书写的参数(真实数据)</li></ul></li><li><p>函数的返回值</p><ul><li>作用：函数调用后，返回需要的计算结果</li><li>写法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> 表达式 （一个字符 或者 运算式）</code></pre></li><li><p>函数的说明文档</p><ul><li>作用：保存函数解释说明的信息</li><li>写法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 函数说明文档 """</span></code></pre></li><li><p>函数嵌套调用：一个函数内部嵌套调用另外一个函数</p></li></ul><h3 id="9-变量作用域"><a href="#9-变量作用域" class="headerlink" title="9. 变量作用域"></a>9. 变量作用域</h3><p>变量作用域指的是变量生效的范围，主要分为两类：局部变量和全局变量。</p><ul><li>局部变量</li></ul><p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</p><p>定义一个函数， 声明一个变量： 函数体内部访问一次， 函数体外部访问一次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>testA<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 报错：name 'a' is not defined</span></code></pre><blockquote><p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p></blockquote><p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><ul><li>全局变量</li></ul><p>所谓全局变量，指的是在函数体内、外都能生效的变量。</p><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义全局变量a</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问全局变量a，并打印变量a存储的数据</span><span class="token keyword">def</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 访问全局变量a，并打印变量a存储的数据</span>testA<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span>testB<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span></code></pre><p>思考：<code>testB</code>函数需求修改变量a的值为200，如何修改程序？</p><p>这不是在修改全局变量 </p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>testA<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span>testB<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 200</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'全局变量a = {a}'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全局变量a = 100</span></code></pre><p>思考：在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？</p><p>答：不是。观察上述代码发现，15行得到a的数据是100，仍然是定义全局变量a时候的值，而没有返回</p><p><code>testB</code>函数内部的200。综上：<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><p>思考：如何在函数体内部修改全局变量？</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># global 关键字声明a是全局变量</span>    <span class="token keyword">global</span> a    a <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>testA<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span>testB<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 200</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'全局变量a = {a}'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全局变量a = 200</span></code></pre><p>总结：</p><ol><li>如果在函数里面直接把变量a = 200 赋值， 此时的a不是全局变量的修改， 而是相当于在函数内部声明了一个新的局部变量</li><li>函数体内部修改全局变量： 先global声明a是全局变量， 然后再变量重新赋值</li></ol><h3 id="10-多函数程序执行流程"><a href="#10-多函数程序执行流程" class="headerlink" title="10. 多函数程序执行流程"></a>10. 多函数程序执行流程</h3><p>一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，如下所示：</p><ul><li>共用全局变量</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 定义全局变量</span>glo_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> glo_num    <span class="token comment" spellcheck="true"># 修改全局变量</span>    glo_num <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用test1函数中修改后的全局变量</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>glo_num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span>test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 调用test2函数，执行函数内部代码：打印 （访问全局变量）</span>test2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span></code></pre><ul><li>返回值作为参数传递</li></ul><p>定义两个函数</p><p>函数1有返回值50</p><p>函数2把返回值50作为参数传入（定义函数2要有形参）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">50</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1. 保存函数test1的返回值</span>result <span class="token operator">=</span> test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.将函数返回值所在变量作为参数传递到test2函数</span>test2<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 50</span></code></pre><h3 id="11-函数的返回值"><a href="#11-函数的返回值" class="headerlink" title="11.函数的返回值"></a>11.函数的返回值</h3><p>思考：如果一个函数有如下两个return (如下所示)，程序如何执行？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token number">2</span>result <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><p>答：只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</p><p>思考：如果一个函数要有多个返回值，该如何书写代码？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>result <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2)</span></code></pre><blockquote><p>注意：</p><ol><li><code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。</li><li>return后面可以连接列表、元组或字典，以返回多个值。</li></ol></blockquote><h3 id="12-函数的参数"><a href="#12-函数的参数" class="headerlink" title="12. 函数的参数"></a>12. 函数的参数</h3><h4 id="12-1-位置参数"><a href="#12-1-位置参数" class="headerlink" title="12.1 位置参数"></a>12.1 位置参数</h4><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的名字是{name}, 年龄是{age}, 性别是{gender}'</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：传递和定义参数的顺序及个数必须一致。</p></blockquote><h4 id="12-2-关键字参数"><a href="#12-2-关键字参数" class="headerlink" title="12.2 关键字参数"></a>12.2 关键字参数</h4><p>函数调用，通过“键=值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的名字是{name}, 年龄是{age}, 性别是{gender}'</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用参数传参</span>user_info<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span></code></pre><p>注意：<strong>函数调用时，如果有位置参数（不是键=值的形式的）时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p><p>顺序不影响关键字参数的意义</p><p>参数的英文： argument </p><h4 id="12-3-缺省参数"><a href="#12-3-缺省参数" class="headerlink" title="12.3 缺省参数"></a>12.3 缺省参数</h4><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><p>比如剃须刀购买用户， 填信息的时候， 默认性别信息是男， 减少客户填写信息的时间成本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'您的名字是{name}, 年龄是{age}, 性别是{gender}'</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>user_info<span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p></blockquote><h4 id="12-4-不定长参数"><a href="#12-4-不定长参数" class="headerlink" title="12.4 不定长参数"></a>12.4 不定长参数</h4><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><p>传入数据个数不一定的情况</p><ul><li>包裹位置传递</li></ul><p>不定长位置参数（接收所有位置参数， 返回一个元组）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># *代表必须传入数据，必填项   </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ('TOM',)</span>user_info<span class="token punctuation">(</span><span class="token string">'TOM'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ('TOM', 18)</span>user_info<span class="token punctuation">(</span><span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</p><p>不传入数据的话，返回一个空元组</p></blockquote><ul><li>包裹关键字传递</li></ul><p>返回一个字典</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">user_info</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'name': 'TOM', 'age': 18, 'id': 110}</span>user_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'TOM'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 传参时的age id不加引号，这个相当于变量名</span></code></pre><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p><p>组包：收集零散数据（所有的参数），返回一个整体</p></blockquote><h3 id="13-拆包和交换变量值"><a href="#13-拆包和交换变量值" class="headerlink" title="13. 拆包和交换变量值"></a>13. 拆包和交换变量值</h3><h4 id="13-1-拆包"><a href="#13-1-拆包" class="headerlink" title="13.1 拆包"></a>13.1 拆包</h4><ul><li>拆包：元组</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">return_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span>num1<span class="token punctuation">,</span> num2 <span class="token operator">=</span> return_num<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 拿两个变量去接收这两个数据， 拆包</span><span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 100</span><span class="token keyword">print</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 200</span></code></pre><ul><li>拆包：字典</li></ul><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> dict1<span class="token comment" spellcheck="true"># 对字典进行拆包，取出来的是字典的key， 变量存储的是key值</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># name</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># age</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># TOM    # 字典不支持下标， 要按key 查找数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 18</span></code></pre><h4 id="13-2-交换变量值"><a href="#13-2-交换变量值" class="headerlink" title="13.2 交换变量值"></a>13.2 交换变量值</h4><p>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。</p><ul><li>方法一</li></ul><p>借助第三变量存储数据。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 定义中间变量 （用于临时存储，任意赋值就行）</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 2. 将a的数据存储到c</span>c <span class="token operator">=</span> a<span class="token comment" spellcheck="true"># 3. 将b的数据20赋值到a，此时a = 20</span>a <span class="token operator">=</span> b<span class="token comment" spellcheck="true"># 4. 将之前c的数据10赋值到b，此时b = 10</span>b <span class="token operator">=</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 20</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 10</span></code></pre><ul><li>方法二</li></ul><pre class=" language-python"><code class="language-python">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a   <span class="token comment" spellcheck="true">#（赋值）</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span></code></pre><h3 id="13-引用"><a href="#13-引用" class="headerlink" title="13. 引用"></a>13. 引用</h3><h4 id="13-1-了解引用"><a href="#13-1-了解引用" class="headerlink" title="13.1 了解引用"></a>13.1 了解引用</h4><p>在python中，值（数据）是靠引用来传递来的。</p><p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。（内存的十进制值）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. int类型</span>a <span class="token operator">=</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># id地址一样， 只不过是给内存或者这个值起了不一样的名字</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140708464157520</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140708464157520</span>a <span class="token operator">=</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true"># 修改a的数据， b的值不变</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1,说明int类型为不可变类型 </span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140708464157552，此时得到是的数据2的内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 140708464157520</span><span class="token comment" spellcheck="true"># 因为修改了a的数据， 内存要开辟另外一份内存存储数据2, id检测a和b的地址不同（两份内存空间）</span><span class="token comment" spellcheck="true"># 2. 列表</span>aa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>bb <span class="token operator">=</span> aa<span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2325297783432</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2325297783432</span>aa<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [10, 20, 30], 列表为可变类型， 修改了aa, 修改的是原数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2325297783432</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2325297783432</span></code></pre><h4 id="13-2-引用当做实参"><a href="#13-2-引用当做实参" class="headerlink" title="13.2 引用当做实参"></a>13.2 引用当做实参</h4><p>实参： 真实数据  </p><p>引用相当于变量名</p><p>因此这个相当于用变量名当实参（引用可以当作实参传入）</p><p>定义函数的时候 要定义一个形参</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    a <span class="token operator">+=</span> a  <span class="token comment" spellcheck="true"># 计算（可变 or 不可变）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># int：计算前后id值不同</span>b <span class="token operator">=</span> <span class="token number">100</span>test1<span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># （变量名当实参）</span><span class="token comment" spellcheck="true"># 列表：计算前后id值相同</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>test1<span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><h3 id="14-可变和不可变类型"><a href="#14-可变和不可变类型" class="headerlink" title="14. 可变和不可变类型"></a>14. 可变和不可变类型</h3><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变（修改的是原数据），否则是不可变.</p><ul><li>可变类型<ul><li>列表</li><li>字典</li><li>集合</li></ul></li><li>不可变类型<ul><li>整型</li><li>浮点型</li><li>字符串</li><li>元组</li></ul></li></ul><h3 id="15-总结2"><a href="#15-总结2" class="headerlink" title="15. 总结2"></a>15. 总结2</h3><ul><li>变量作用域<ul><li>全局：函数体内外都能生效</li><li>局部：当前函数体内部生效</li></ul></li><li>函数多返回值写法</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span> 表达式<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>函数的参数<ul><li>位置参数<ul><li>形参和实参的个数和书写顺序必须一致</li></ul></li><li>关键字参数<ul><li>写法： <code>key=value</code></li><li>特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li></ul></li><li>缺省参数<ul><li>缺省参数就是默认参数</li><li>写法：<code>key=vlaue</code></li></ul></li><li>不定长位置参数<ul><li>收集所有位置参数，返回一个元组</li></ul></li><li>不定长关键字参数<ul><li>收集所有关键字参数，返回一个字典</li></ul></li></ul></li><li>引用：Python中，数据的传递都是通过引用</li></ul><h3 id="16-应用：学员管理系统"><a href="#16-应用：学员管理系统" class="headerlink" title="16. 应用：学员管理系统"></a>16. 应用：学员管理系统</h3><h3 id="16-1-系统简介"><a href="#16-1-系统简介" class="headerlink" title="16.1 系统简介"></a>16.1 系统简介</h3><p>需求：进入系统（run程序）显示系统功能界面，功能如下：</p><ul><li>1、添加学员</li><li>2、删除学员</li><li>3、修改学员信息</li><li>4、查询学员信息</li><li>5、显示所有学员信息</li><li>6、退出系统</li></ul><p>系统共6个功能，用户根据自己需求选取。</p><h3 id="16-2-步骤分析"><a href="#16-2-步骤分析" class="headerlink" title="16.2 步骤分析"></a>16.2 步骤分析</h3><ol><li><p>显示功能界面 （print）</p></li><li><p>用户输入功能序号 (用户按照需求选取)</p></li><li><p>根据用户输入的功能序号，执行不同的功能(函数)</p><p>3.1 定义函数</p><p>3.2 调用函数</p></li></ol><h3 id="16-3-需求实现"><a href="#16-3-需求实现" class="headerlink" title="16.3 需求实现"></a>16.3 需求实现</h3><h4 id="16-3-1-显示功能界面"><a href="#16-3-1-显示功能界面" class="headerlink" title="16.3.1 显示功能界面"></a>16.3.1 显示功能界面</h4><p>定义函数<code>print_info</code>，负责显示系统功能。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'欢迎登录学员管理系统'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1: 添加学员'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2: 删除学员'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3: 修改学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4: 查询学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5: 显示所有学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6: 退出系统'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>        print_info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="16-3-2-用户输入序号，选择功能"><a href="#16-3-2-用户输入序号，选择功能" class="headerlink" title="16.3.2 用户输入序号，选择功能"></a>16.3.2 用户输入序号，选择功能</h4><pre class=" language-python"><code class="language-python">user_num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请选择您需要的功能序号：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="16-3-3-根据用户选择，执行不同的功能"><a href="#16-3-3-根据用户选择，执行不同的功能" class="headerlink" title="16.3.3 根据用户选择，执行不同的功能"></a>16.3.3 根据用户选择，执行不同的功能</h4><p>(多重判断)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> user_num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加学员'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除学员'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改学员信息'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询学员信息'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'显示所有学员信息'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出系统'</span><span class="token punctuation">)</span></code></pre><blockquote><p>工作中，需要根据实际需求调优代码。</p><ol><li>用户选择系统功能的代码需要循环使用（while True），直到用户主动退出系统（选择功能6）。</li><li>如果用户输入1-6以外的数字，需要提示用户。</li></ol></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 显示功能界面</span>    print_info<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2. 用户选择功能</span>    user_num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请选择您需要的功能序号：'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 根据用户选择，执行不同的功能</span>    <span class="token keyword">if</span> user_num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加学员'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除学员'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'显示所有学员信息'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出系统'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新输入!!!'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 提示用户要输入1~6的数字</span></code></pre><h4 id="16-3-4-定义不同功能的函数"><a href="#16-3-4-定义不同功能的函数" class="headerlink" title="16.3.4 定义不同功能的函数"></a>16.3.4 定义不同功能的函数</h4><p>所有功能函数都是操作学员信息，所有存储所有学员信息应该是一个全局变量，数据类型为列表。</p><pre class=" language-python"><code class="language-python">info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 等待存储所有学员信息</span></code></pre><h5 id="16-3-4-1-添加学员"><a href="#16-3-4-1-添加学员" class="headerlink" title="16.3.4.1 添加学员"></a>16.3.4.1 添加学员</h5><ul><li>需求分析</li></ul><ol><li><p>接收用户输入学员信息，并保存 （信息来源： 输入）</p></li><li><p>判断是否添加学员信息</p><p>2.1 如果学员姓名已经存在，则报错提示</p><p>2.2 如果学员姓名不存在，则准备空字典（键值对），将用户输入的数据追加到字典，再列表追加字典数据（添加数据）</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 添加学员 """</span>    <span class="token comment" spellcheck="true"># 接收用户输入学员信息</span>    new_id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入学号：'</span><span class="token punctuation">)</span>    new_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入姓名：'</span><span class="token punctuation">)</span>    new_tel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入手机号：'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 搭框架时， 如果还不知道函数剧吐要实现什么功能， 可以缩进写pass作占位，语法不报错</span>        <span class="token comment" spellcheck="true"># 声明info是全局变量</span>    <span class="token keyword">global</span> info  <span class="token comment" spellcheck="true"># 列表</span>    <span class="token comment" spellcheck="true"># 检测用户输入的姓名是否存在，存在则报错提示 （重名提示）</span>    <span class="token comment" spellcheck="true"># 判断用户输入的的姓名和列表里字典的name对应的值 若相等 提示</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 遍历</span>        <span class="token keyword">if</span> new_name <span class="token operator">==</span> i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># i 列表里的字典， 按照name 找对应的值</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该用户已经存在！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 退出函数， return下面的代码不执行了，不添加此学员信息</span>    <span class="token comment" spellcheck="true"># 如果用户输入的姓名不存在，则添加该学员信息</span>    info_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 准备空字典， 将学员信息加进字典， 再将字典追加到列表</span>        <span class="token comment" spellcheck="true"># 将用户输入的数据追加到字典</span>    info_dict<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_id   <span class="token comment" spellcheck="true"># 新增键值对</span>    info_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_name    info_dict<span class="token punctuation">[</span><span class="token string">'tel'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_tel        <span class="token comment" spellcheck="true"># 将这个学员的字典数据追加到列表</span>    info<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info_dict<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><h5 id="16-3-4-2-删除学员"><a href="#16-3-4-2-删除学员" class="headerlink" title="16.3.4.2 删除学员"></a>16.3.4.2 删除学员</h5><ul><li>需求分析</li></ul><p>按用户输入的学员姓名进行删除</p><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在</p><p>2.1 如果存在，则列表删除这个数据</p><p>2.2 如果不存在，则提示“该用户不存在”</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除学员</span><span class="token keyword">def</span> <span class="token function">del_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""删除学员"""</span>    <span class="token comment" spellcheck="true"># 1. 用户输入要删除的学员的姓名</span>    del_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要删除的学员的姓名：'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> info <span class="token comment" spellcheck="true"># 在函数体内部要操作全局变量的数据的时候要声明一下</span>    <span class="token comment" spellcheck="true"># 2. 判断学员是否存在:如果输入的姓名存在则删除，否则报错提示</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 遍历列表</span>        <span class="token keyword">if</span> del_name <span class="token operator">==</span> i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断学员是否存在，存在就删除</span>            info<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span>  <span class="token comment" spellcheck="true"># 因为是不重名系统，找到这个学员后，后面就不需要遍历了</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该学员不存在'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环正常结束时要执行的代码（没有经历break的情况）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><h5 id="16-3-4-3-修改学员信息"><a href="#16-3-4-3-修改学员信息" class="headerlink" title="16.3.4.3 修改学员信息"></a>16.3.4.3 修改学员信息</h5><ul><li>需求分析</li></ul><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在</p><p>2.1 如果存在，则修改这位学员的信息，例如手机号</p><p>2.2 如果不存在，则报错</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 修改函数</span><span class="token keyword">def</span> <span class="token function">modify_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""修改函数"""</span>    <span class="token comment" spellcheck="true"># 1. 用户输入要修改的学员的姓名</span>    modify_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要修改的学员的姓名：'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> info    <span class="token comment" spellcheck="true"># 2. 判断学员是否存在：如果输入的姓名存在则修改手机号，否则报错提示</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>        <span class="token keyword">if</span> modify_name <span class="token operator">==</span> i <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将tel这个key修改值， 并终止此循环</span>            i<span class="token punctuation">[</span><span class="token string">'tel'</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入新的手机号：'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该学员不存在'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><h5 id="16-3-4-4-查询学员信息"><a href="#16-3-4-4-查询学员信息" class="headerlink" title="16.3.4.4 查询学员信息"></a>16.3.4.4 查询学员信息</h5><ul><li>需求分析</li></ul><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查学员是否存在</p><p>2.1 如果存在，则显示（打印）这个学员的信息</p><p>2.2 如果不存在，则报错提示</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><p>用户输入目标学员姓名</p><p>检查学员是否存在， 存在则打印这个学员的信息； 不存在则提示</p><p>声明全局变量</p><p>遍历info， 判断输入的学员是否存在</p><p>学员存在，打印信息并终止循环</p><p>学员不存在，提示</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询学员</span><span class="token keyword">def</span> <span class="token function">search_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""查询学员"""</span>    <span class="token comment" spellcheck="true"># 1. 输入要查找的学员姓名：</span>    search_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要查找的学员姓名：'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> info <span class="token comment" spellcheck="true"># 声明</span>    <span class="token comment" spellcheck="true"># 2. 判断学员是否存在：如果输入的姓名存在则显示这位学员信息，否则报错提示</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>        <span class="token keyword">if</span> search_name <span class="token operator">==</span> i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查找到的学员信息如下：----------'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"该学员的学号是{i['id']}, 姓名是{i['name']}, 手机号是{i['tel']}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 引号不能冲突</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该学员不存在'</span><span class="token punctuation">)</span></code></pre><h5 id="16-3-4-5-显示所有学员信息"><a href="#16-3-4-5-显示所有学员信息" class="headerlink" title="16.3.4.5 显示所有学员信息"></a>16.3.4.5 显示所有学员信息</h5><ul><li>需求分析</li></ul><p>打印所有学员信息</p><ul><li>代码实现</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 显示所有学员信息</span><span class="token keyword">def</span> <span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 显示所有学员信息 """</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'学号\t姓名\t手机号'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># \t数据对齐， 打印提示字</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{i["id"]}\t{i["name"]}\t{i["tel"]}'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 遍历打印数据</span></code></pre><h5 id="16-3-4-6-退出系统"><a href="#16-3-4-6-退出系统" class="headerlink" title="16.3.4.6 退出系统"></a>16.3.4.6 退出系统</h5><p>在用户输入功能序号<code>6</code>的时候要退出系统，代码如下：</p><p>简单， 不用封装函数， 若封装函数可能会出问题</p><p>因为break是终止就近的那个循环</p><pre class=" language-python"><code class="language-python">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">elif</span> user_num <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">:</span>        exit_flag <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'确定要退出吗？yes or no'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 接收用户输入数据存到变量， 确认意向</span>        <span class="token keyword">if</span> exit_flag <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>   <span class="token comment" spellcheck="true"># 退出whie True 循环</span></code></pre><h3 id="17-递归"><a href="#17-递归" class="headerlink" title="17. 递归"></a>17. 递归</h3><h4 id="17-1-递归的应用场景"><a href="#17-1-递归的应用场景" class="headerlink" title="17.1 递归的应用场景"></a>17.1 递归的应用场景</h4><p>递归是一种编程思想，应用场景：</p><ol><li>在我们日常开发中，如果要遍历一个文件夹下面所有的文件，通常会使用递归来实现；</li><li>在后续的算法课程中，很多算法都离不开递归，例如：快速排序。</li></ol><h4 id="17-1-1-递归的特点"><a href="#17-1-1-递归的特点" class="headerlink" title="17.1.1 递归的特点"></a>17.1.1 递归的特点</h4><ul><li>函数内部自己调用自己  </li><li>必须有出口</li></ul><p>17.2 应用：3以内数字累加和</p><ul><li>代码</li></ul><p>6 = 3 + 2以内数字累加和</p><p>2以内数字累加和 = 2 + 1以内数字累加和</p><p>1以内数据累加和 = 1 # 出口</p><h1 id="当前数字-当前数字-1的累加和"><a href="#当前数字-当前数字-1的累加和" class="headerlink" title="当前数字 + 当前数字-1的累加和"></a>当前数字 + 当前数字-1的累加和</h1><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3 + 2 + 1</span><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1.如果是1，直接返回1 -- 出口</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 2.如果不是1，重复执行累加并返回结果</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> sum_numbers<span class="token punctuation">(</span>num<span class="token number">-1</span><span class="token punctuation">)</span>sum_result <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果为6</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum_result<span class="token punctuation">)</span></code></pre><p>return 返回值返回到上次函数调用的地方</p><p>递归： 把真实数据作一步步传递， 当遇到出口的时候， 依次把返回值 返回 ，直到返回到第一次函数调用得到整个函数运算结果</p><p>出口？ 没有出口： 超出最大递归深度 maximum recursion depth exceeded</p><h3 id="18-lambda-表达式"><a href="#18-lambda-表达式" class="headerlink" title="18. lambda 表达式"></a>18. lambda 表达式</h3><h4 id="18-1-lambda的应用场景"><a href="#18-1-lambda的应用场景" class="headerlink" title="18.1 lambda的应用场景"></a>18.1 lambda的应用场景</h4><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p><h4 id="18-2-lambda语法"><a href="#18-2-lambda语法" class="headerlink" title="18.2 lambda语法"></a>18.2 lambda语法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> 参数列表 ： 表达式</code></pre><blockquote><p>注意</p></blockquote><ul><li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</li><li>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</li><li>function 函数</li><li>lambda 实际上是个匿名函数</li><li>一般会将lambda函数存到变量（fn）里面，方便调用</li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数</span><span class="token keyword">def</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">200</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># lambda表达式</span>fn2 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote><h4 id="18-3-示例：计算a-b"><a href="#18-3-示例：计算a-b" class="headerlink" title="18.3 示例：计算a + b"></a>18.3 示例：计算a + b</h4><h5 id="18-3-1-函数实现"><a href="#18-3-1-函数实现" class="headerlink" title="18.3.1 函数实现"></a>18.3.1 函数实现</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> bresult <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><blockquote><p>思考：需求简单，是否代码多？</p></blockquote><h5 id="18-3-2-lambda实现"><a href="#18-3-2-lambda实现" class="headerlink" title="18.3.2 lambda实现"></a>18.3.2 lambda实现</h5><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="18-4-lambda的参数形式"><a href="#18-4-lambda的参数形式" class="headerlink" title="18.4 lambda的参数形式"></a>18.4 lambda的参数形式</h4><p>lambda的参数形式和def()的参数写法一致</p><h5 id="18-4-1-无参数"><a href="#18-4-1-无参数" class="headerlink" title="18.4.1.无参数"></a>18.4.1.无参数</h5><p>无参数 冒号后直接写返回值</p><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="18-4-2-一个参数"><a href="#18-4-2-一个参数" class="headerlink" title="18.4.2.一个参数"></a>18.4.2.一个参数</h5><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="18-4-3-默认参数"><a href="#18-4-3-默认参数" class="headerlink" title="18.4.3.默认参数"></a>18.4.3.默认参数</h5><p>形式：k=v， 缺省参数</p><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">:</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="3-4-4-可变参数：-args"><a href="#3-4-4-可变参数：-args" class="headerlink" title="3.4.4.可变参数：*args"></a>3.4.4.可变参数：*args</h5><p>不定长位置参数， 返回元组</p><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p></blockquote><h5 id="3-4-5-可变参数：-kwargs"><a href="#3-4-5-可变参数：-kwargs" class="headerlink" title="3.4.5.可变参数：**kwargs"></a>3.4.5.可变参数：**kwargs</h5><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> kwargs<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="18-5lambda的应用"><a href="#18-5lambda的应用" class="headerlink" title="18.5lambda的应用"></a>18.5lambda的应用</h4><h5 id="18-5-1-带判断的lambda"><a href="#18-5-1-带判断的lambda" class="headerlink" title="18.5.1. 带判断的lambda"></a>18.5.1. 带判断的lambda</h5><p>三目运算符， 按不同的情况返回两种类型的值</p><p>条件成立， 则输出if 前面的变量， 不成立则输出 else 后面的变量</p><pre class=" language-python"><code class="language-python">fn1 <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>fn1<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="18-5-2-列表数据按字典key对应的值排序"><a href="#18-5-2-列表数据按字典key对应的值排序" class="headerlink" title="18.5.2. 列表数据按字典key对应的值排序"></a>18.5.2. 列表数据按字典key对应的值排序</h5><pre class=" language-python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ROSE'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 按name值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 第一个x, 将来要排列的数据， 第二个x 以哪个key为标准排列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按name值降序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按age值升序排列</span>students<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span></code></pre><h3 id="19-高阶函数"><a href="#19-高阶函数" class="headerlink" title="19. 高阶函数"></a>19. 高阶函数</h3><p>==把函数作为参数传入==，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h4 id="19-1-体验高阶函数"><a href="#19-1-体验高阶函数" class="headerlink" title="19.1 体验高阶函数"></a>19.1 体验高阶函数</h4><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><pre class=" language-python"><code class="language-python">abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 10</span></code></pre><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><pre class=" language-python"><code class="language-python">round<span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>round<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span></code></pre><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul><li>方法1</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> abs<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>b<span class="token punctuation">)</span>result <span class="token operator">=</span> add_num<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span></code></pre><ul><li>方法2</li></ul><p>第三个参数f用来接收将来传入的函数， 用f处理变量a，用f 处理变量b， 再进行运算。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>b<span class="token punctuation">)</span>result <span class="token operator">=</span> sum_num<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span></code></pre><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h4 id="19-2-内置高阶函数"><a href="#19-2-内置高阶函数" class="headerlink" title="19.2 内置高阶函数"></a>19.2 内置高阶函数</h4><h5 id="19-2-1-map"><a href="#19-2-1-map" class="headerlink" title="19.2.1 map()"></a>19.2.1 map()</h5><p>map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的迭代器(Python3)返回。</p><p>迭代器： 调用时返回结果， 需要用变量去接收</p><p>需求：计算<code>list1</code>序列中各个数字的2次方。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>result <span class="token operator">=</span> map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;map object at 0x0000013769653198>  直接打印数据， 是内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 4, 9, 16, 25]   转换数据类型</span></code></pre><h5 id="19-2-2-reduce"><a href="#19-2-2-reduce" class="headerlink" title="19.2.2 reduce()"></a>19.2.2 reduce()</h5><p>reduce(func，lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。</p><blockquote><p>注意：reduce()传入的参数func必须接收2个参数。</p></blockquote><p>需求：计算<code>list1</code>序列中各个数字的累加和。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> functools   <span class="token comment" spellcheck="true"># 导入模块， 使用 functools模块里的reduce</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 定义功能函数</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> bresult <span class="token operator">=</span> functools<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用reduce, 功能函数计算的结果和序列的下一个数据做累计计算</span>                                        <span class="token comment" spellcheck="true"># 形式： 模块名.函数名</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 15</span></code></pre><h5 id="19-2-3-filter"><a href="#19-2-3-filter" class="headerlink" title="19.2.3 filter()"></a>19.2.3 filter()</h5><p>filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p><pre class=" language-python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true"># 封装一个功能函数， 滤掉奇数</span>result <span class="token operator">=</span> filter<span class="token punctuation">(</span>func<span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;filter object at 0x0000017AF9DC3198>   内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [2, 4, 6, 8, 10]  转换数据类型</span></code></pre><h2 id="二十二、文件操作2"><a href="#二十二、文件操作2" class="headerlink" title="二十二、文件操作2"></a>二十二、文件操作2</h2><h3 id="1-文件操作的作用"><a href="#1-文件操作的作用" class="headerlink" title="1. 文件操作的作用"></a>1. 文件操作的作用</h3><p>思考：什么是文件？</p><p>思考：文件操作包含什么？</p><p>答：打开、关闭、读、写、复制….</p><p>思考：文件操作的的作用是什么？</p><p>答：读取内容、写入内容、备份内容……</p><blockquote><p>总结：文件操作的作用就是把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力。</p><p>学员管理系统的数据存储， 不用每打开一次系统再重新录入一次</p></blockquote><h3 id="2-文件的基本操作"><a href="#2-文件的基本操作" class="headerlink" title="2. 文件的基本操作"></a>2. 文件的基本操作</h3><h4 id="2-1-文件操作步骤"><a href="#2-1-文件操作步骤" class="headerlink" title="2.1 文件操作步骤"></a>2.1 文件操作步骤</h4><ol><li>打开文件</li><li>读写等操作</li><li>关闭文件   （如果文件不关闭， 会一直占用内存）</li></ol><blockquote><p>注意：可以只打开和关闭文件，不进行任何读写操作。</p></blockquote><h4 id="2-1-1-打开"><a href="#2-1-1-打开" class="headerlink" title="2.1.1  打开"></a>2.1.1  打开</h4><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><pre class=" language-python"><code class="language-python">open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> mode<span class="token punctuation">)</span></code></pre><p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p><p>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</p><h5 id="2-1-1-1-打开文件模式"><a href="#2-1-1-1-打开文件模式" class="headerlink" title="2.1.1.1 打开文件模式"></a>2.1.1.1 打开文件模式</h5><p>主访问模式： r w a</p><p>带b 的： 以二进制格式操作文件</p><p>带 + 的： 可读可写模式</p><p>文件指针： 相当于光标的位置， 默认向右读写</p><table><thead><tr><th align="center">模式</th><th>描述</th></tr></thead><tbody><tr><td align="center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。如果文件不存在报错，且不支持写入操作</td></tr><tr><td align="center">rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 (文件指针在开头)</td></tr><tr><td align="center">wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。  （在原有内容基础上，追加新内容）</td></tr><tr><td align="center">ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>若省略访问模式参数：表示访问模式为r （只读）</p><h5 id="2-1-1-2-快速体验"><a href="#2-1-1-2-快速体验" class="headerlink" title="2.1.1.2 快速体验"></a>2.1.1.2 快速体验</h5><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。  （把当前open 函数存一个变量）</p></blockquote><h4 id="2-1-2-文件对象方法"><a href="#2-1-2-文件对象方法" class="headerlink" title="2.1.2 文件对象方法"></a>2.1.2 文件对象方法</h4><h5 id="2-1-2-1-写"><a href="#2-1-2-1-写" class="headerlink" title="2.1.2.1 写"></a>2.1.2.1 写</h5><ul><li>语法</li></ul><pre class=" language-python"><code class="language-python">文件对象<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">)</span></code></pre><ul><li>体验</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 打开文件</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.文件写入</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3. 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：</p><ol><li><code>w</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h5 id="2-1-2-2-读"><a href="#2-1-2-2-读" class="headerlink" title="2.1.2.2 读"></a>2.1.2.2 读</h5><ul><li>read()</li></ul><pre class=" language-python"><code class="language-python">文件对象<span class="token punctuation">.</span>read<span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），文件内容如果换行， 底层有\n, 换行符占一个字节</p><p>如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote><ul><li>readlines()</li></ul><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 用变量接收列表</span><span class="token comment" spellcheck="true"># ['hello world\n', 'abcdefg\n', 'aaa\n', 'bbb\n', 'ccc']</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>readline()</li></ul><p>readline()一次读取一行内容。  (第一次调用， 读取第一行； 第二次调用， 读取第二行)</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第一行：{content}'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'第二行：{content}'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="2-1-2-3-seek"><a href="#2-1-2-3-seek" class="headerlink" title="2.1.2.3 seek()"></a>2.1.2.3 seek()</h5><p>作用：用来移动文件指针。</p><p>语法如下：</p><pre class=" language-python"><code class="language-python">文件对象<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>偏移量<span class="token punctuation">,</span> 起始位置<span class="token punctuation">)</span></code></pre><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul><p>偏移量： 偏移几个字符</p><p>把文件指针放到结尾： f.seek(0, 2)   #无法读取数据</p><p>把文件指针放到开头： f.seek(0,0)  简化写法为 ：f.seek(0)</p></blockquote><h5 id="2-1-3-关闭"><a href="#2-1-3-关闭" class="headerlink" title="2.1.3 关闭"></a>2.1.3 关闭</h5><pre class=" language-open"><code class="language-open">文件对象.close()</code></pre><h3 id="3-文件备份"><a href="#3-文件备份" class="headerlink" title="3. 文件备份"></a>3. 文件备份</h3><p>对文件数据内容的保护</p><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><h4 id="3-1-步骤"><a href="#3-1-步骤" class="headerlink" title="3.1 步骤"></a>3.1 步骤</h4><ol><li>接收用户输入的文件名</li><li>规划备份文件名 （w 模式打开可以直接新建文件）</li><li>备份文件写入数据  （先有备份文件，再写入数据）</li></ol><h4 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h4><ol><li>接收用户输入目标文件名</li></ol><pre class=" language-python"><code class="language-python">old_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span></code></pre><ol start="2"><li><p>规划备份文件名</p><p>2.1 提取目标文件后缀</p><p>2.2 组织备份的文件名，xx[备份]后缀  （将名字和后缀分离，组织新名字）</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2.1 提取文件后缀点的下标</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最右侧的点才是后缀前的点</span><span class="token comment" spellcheck="true"># print(index)  # 后缀中.的下标</span><span class="token comment" spellcheck="true"># 源文件名就是字符串中的一部分子串 -- 切片[开始：结束：步长] （每个字符都要提取：步长为1，可以省略，开始为0 也可以省略）</span><span class="token comment" spellcheck="true"># print(old_name[:index])  # 源文件名（无后缀）</span><span class="token comment" spellcheck="true"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 打印新文件名（带后缀）</span><span class="token comment" spellcheck="true"># print(new_name)</span></code></pre><ol start="3"><li><p>备份文件写入数据</p><p>3.1 打开源文件 和 备份文件  （源文件读取，备份文件写入）</p><p>3.2 将源文件数据写入备份文件</p><p>3.3 关闭文件</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 3.1 打开文件</span>old_f <span class="token operator">=</span> open<span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># rb 计算机底层是以二进制处理所有数据的</span>new_f <span class="token operator">=</span> open<span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.2 将源文件数据写入备份文件 （不知目标文件大小， 循环读取写入， 当读取出来的数据没有了，终止循环就行）</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 1024读取长度</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  （读取数据完成了）        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.3 关闭文件</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-3-思考"><a href="#3-3-思考" class="headerlink" title="3.3 思考"></a>3.3 思考</h4><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><pre class=" language-python"><code class="language-python">old_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入您要备份的文件名：'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> old_name<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    postfix <span class="token operator">=</span> old_name<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span>new_name <span class="token operator">=</span> old_name<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'[备份]'</span> <span class="token operator">+</span> postfixold_f <span class="token operator">=</span> open<span class="token punctuation">(</span>old_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>new_f <span class="token operator">=</span> open<span class="token punctuation">(</span>new_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    con <span class="token operator">=</span> old_f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>con<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    new_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>con<span class="token punctuation">)</span>old_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>new_f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-文件和文件夹的操作"><a href="#4-文件和文件夹的操作" class="headerlink" title="4. 文件和文件夹的操作"></a>4. 文件和文件夹的操作</h3><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os</code></pre><ol start="2"><li>使用<code>os</code>模块相关功能</li></ol><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-文件重命名"><a href="#4-1-文件重命名" class="headerlink" title="4.1 文件重命名"></a>4.1 文件重命名</h4><p>也可以实现文件夹重命名</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>目标文件名<span class="token punctuation">,</span> 新文件名<span class="token punctuation">)</span></code></pre><h4 id="4-2-删除文件"><a href="#4-2-删除文件" class="headerlink" title="4.2 删除文件"></a>4.2 删除文件</h4><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>目标文件名<span class="token punctuation">)</span></code></pre><h4 id="4-3-创建文件夹"><a href="#4-3-创建文件夹" class="headerlink" title="4.3 创建文件夹"></a>4.3 创建文件夹</h4><p>mk = make， 不可以重名</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span></code></pre><h4 id="4-4-删除文件夹"><a href="#4-4-删除文件夹" class="headerlink" title="4.4 删除文件夹"></a>4.4 删除文件夹</h4><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>文件夹名字<span class="token punctuation">)</span></code></pre><h4 id="4-5-获取当前目录"><a href="#4-5-获取当前目录" class="headerlink" title="4.5 获取当前目录"></a>4.5 获取当前目录</h4><p>返回当前文件所在目录路径</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-6-改变默认目录"><a href="#4-6-改变默认目录" class="headerlink" title="4.6 改变默认目录"></a>4.6 改变默认目录</h4><p>ch = change</p><p>改变目录路径</p><p>需求：在已创建的aa文件夹中创建bb 文件夹</p><ol><li>切换目录到aa</li><li>创建bb</li></ol><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span></code></pre><h4 id="4-7-获取目录列表"><a href="#4-7-获取目录列表" class="headerlink" title="4.7 获取目录列表"></a>4.7 获取目录列表</h4><p>获取某个文件夹（目录）里的所有文件，返回一个列表</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>目录<span class="token punctuation">)</span></code></pre><h3 id="4-应用案例"><a href="#4-应用案例" class="headerlink" title="4.应用案例"></a>4.应用案例</h3><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><h4 id="添加实现："><a href="#添加实现：" class="headerlink" title="添加实现："></a>添加实现：</h4><p> 找到所有文件： 获取某一文件夹的目录列表 – listdir()  (用前导入os模块)</p><p>构造名字</p><p>重命名</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加/删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><ul><li>代码</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 获取指定目录</span>dir_name <span class="token operator">=</span> <span class="token string">'./'</span><span class="token comment" spellcheck="true"># 获取指定目录的文件列表</span>file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(file_list)</span><span class="token comment" spellcheck="true"># 遍历文件列表内的文件</span><span class="token keyword">for</span> name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 添加指定字符</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        new_name <span class="token operator">=</span> <span class="token string">'Python-'</span> <span class="token operator">+</span> name    <span class="token comment" spellcheck="true"># 删除指定字符</span>    <span class="token keyword">elif</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span><span class="token string">'Python-'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获得下标</span>        new_name <span class="token operator">=</span> name<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 取长度构造切片</span>    <span class="token comment" spellcheck="true"># 打印新文件名，测试程序正确性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 重命名</span>    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>dir_name<span class="token operator">+</span>name<span class="token punctuation">,</span> dir_name<span class="token operator">+</span>new_name<span class="token punctuation">)</span></code></pre><h1 id="python-二级考试准备"><a href="#python-二级考试准备" class="headerlink" title="python 二级考试准备"></a>python 二级考试准备</h1><h2 id="公共基础知识"><a href="#公共基础知识" class="headerlink" title="公共基础知识"></a>公共基础知识</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h3><p>（1）设栈的存储空间为S(1:60)，初始状态为top=61。现经过一系列正常的入栈与退栈操作后，top=1，则栈中的元素个数为（)。</p><p>​    Answer: 60个</p><p>【解析】栈的存储空间为S(1:60)，初始状态为top=61，即找的初始状态为空。当第一个元素进栈后，top=60，第二个元素进栈后，top=59，第三个元素进栈后，top=58，以此类推。当top=1时，共有60个元素入栈。</p><p><strong>top = 0 栈空；top = m 栈满， 此时入栈 top+1， 退栈 top-1</strong></p><p><strong>top = 1+m 栈空， 此时入栈 top-1, 退栈 top+1</strong></p><h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2.排序"></a>2.排序</h3><p>（1）设顺序表的长度为n。下列排序方法中，最坏情况下比较次数小于n(n-1)/2的是（)</p><p>【解析】最坏情况下比较次数:堆排序最小，快速排序为n(n-1)/2，简单插入排序为n(n-1)/2，冒泡排序为n(n-1)/2（其他三个一样）</p><h3 id="3-黑盒白盒测试"><a href="#3-黑盒白盒测试" class="headerlink" title="3.黑盒白盒测试"></a>3.黑盒白盒测试</h3><p>白盒测试的主要技术有逻辑覆盖测试、基本路径测法（动态）等。其中，逻辑覆盖测试包括语句覆盖、路径覆盖、判定覆盖、条件覆盖、判断-条件覆盖。（都为XX覆盖）</p><p>边界值分析属于黑盒测试。</p><h3 id="4-概念数据模型（简称概念模型）"><a href="#4-概念数据模型（简称概念模型）" class="headerlink" title="4.概念数据模型（简称概念模型）"></a>4.概念数据模型（简称概念模型）</h3><p>它是一种面向客观世界、面向用户的模型，它与具体的数据库管理系统和具体的计算机平合无关。概含模型着重于对客观世界复杂事物的描述及对它们内在联系的刻画。</p><h2 id="python-选择题"><a href="#python-选择题" class="headerlink" title="python 选择题"></a>python 选择题</h2><h3 id="1-str-strip"><a href="#1-str-strip" class="headerlink" title="1.str.strip()"></a>1.str.strip()</h3><p>此函数是去除字符串str最左边或最右边的指定字符</p><p>如果字符串里有指定字符，但是没有在最左最右侧，指定字符将不会被删除</p><h3 id="2-zip"><a href="#2-zip" class="headerlink" title="2.zip()"></a>2.zip()</h3><p>　　zip()是Python的一个内建函数，它接受一系列可迭代的对象作为参数，将对象中对应的元素打包成一个个tuple（元组），然后返回由这些tuples组成的list（列表）。若传入参数的长度不等，则返回list的长度和参数中长度最短的对象相同。利用*号操作符，可以将list unzip（解压），看下面的例子就明白了：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 返回一个对象</span>zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># list() 转换为列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 元素个数与最短的列表一致</span>zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">,</span> zipped<span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'zip'</span><span class="token operator">></span> <span class="token operator">&lt;</span>zip object at <span class="token number">0x000001C7C9814180</span><span class="token operator">></span>  <span class="token comment" spellcheck="true"># 对zip对象进行解压缩</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>运行结果：<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># zip对象可以转化为字典</span>name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"bob"</span><span class="token punctuation">,</span> <span class="token string">"jim"</span><span class="token punctuation">,</span> <span class="token string">"james"</span><span class="token punctuation">,</span> <span class="token string">"julie"</span><span class="token punctuation">,</span> <span class="token string">"june"</span><span class="token punctuation">]</span>number_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">]</span>name_and_number <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>name_list<span class="token punctuation">,</span> number_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_and_number<span class="token punctuation">)</span>运行结果：<span class="token punctuation">{</span><span class="token string">'bob'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'jim'</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'james'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'julie'</span><span class="token punctuation">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'june'</span><span class="token punctuation">:</span> <span class="token string">'5'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 搭配for循环，支持并行迭代操作方法   zip()方法用在for循环中，就会支持并行迭代：</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span>运行结果：<span class="token number">2</span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">8</span><span class="token number">3</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">15</span><span class="token number">4</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">24</span> 其实它的工作原理就是使用了zip<span class="token punctuation">(</span><span class="token punctuation">)</span>的结果，在<span class="token keyword">for</span>循环里解包zip结果中的元组，用元组赋值运算。就好像<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>，赋值、序列解包操作。在对文件的操作中我们也会用到遍历，例如Python遍历文件夹目录与文件操作，就是很方便实用的。  <span class="token comment" spellcheck="true"># 二维矩阵变换（矩阵的行列互换）</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 方法一，推导式：</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> a<span class="token punctuation">]</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 方法二，利用zip函数：</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>list<span class="token punctuation">,</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>运行结果：<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span> 这种方法速度更快但也更难以理解，将list看成tuple解压，恰好得到我们“行列互换”的效果，再通过对每个元素应用list<span class="token punctuation">(</span><span class="token punctuation">)</span>函数，将tuple转换为list</code></pre><h3 id="3-列表的对象赋值"><a href="#3-列表的对象赋值" class="headerlink" title="3.列表的对象赋值"></a>3.列表的对象赋值</h3><p>ls1 =[1.2,3,4,5]<br>ls2 =ls1<br>ls2.reverse(print(ls1)</p><p>在Python中，列表对象的赋值就是简单的对象引用。本题中，ls1和ls2是一样的<br>他们指向同一片内存，ls2不过是ls1的别名，是引用。对ls2做修改，Is1也会跟着变化。<br>ls2.reverse()是指将列表ls2中的元素反转，结果为[5,4,3,2,1]，则ls1的值也为[5,4,3,2,1]。</p><h3 id="4-第三方库"><a href="#4-第三方库" class="headerlink" title="4.第三方库"></a>4.第三方库</h3><h4 id="4-1-Pyinstaller-参数含义"><a href="#4-1-Pyinstaller-参数含义" class="headerlink" title="4.1 Pyinstaller 参数含义"></a>4.1 Pyinstaller 参数含义</h4><p>（1）-F：在dist文件夹中只生成独立的打包文件（即exe文件），所有的第三方依赖、资源和代码均打包进此exe中。</p><h4 id="4-2-Beautifulsoup4"><a href="#4-2-Beautifulsoup4" class="headerlink" title="4.2 Beautifulsoup4"></a>4.2 Beautifulsoup4</h4><p>功能：解析和处理HTML和XML，最大优点：根据HTML和XML语法建立解析树，进而高效解析其中的内容</p><h4 id="4-3-网络爬虫方向"><a href="#4-3-网络爬虫方向" class="headerlink" title="4.3 网络爬虫方向"></a>4.3 网络爬虫方向</h4><p>Scrapy, requests</p><h3 id="5-eval"><a href="#5-eval" class="headerlink" title="5.eval()"></a>5.eval()</h3><p>eval()函数内部先执行字符串的拼接，然后再用eval()函数去掉字符串的引号</p><p>字符串”100”+”1+2”=”1001”+”2”，然后将字符串1001+2通过eval()函数转化得到1001+2=1003。</p><h3 id="6-二分支精简结构（紧凑结构）"><a href="#6-二分支精简结构（紧凑结构）" class="headerlink" title="6.二分支精简结构（紧凑结构）"></a>6.二分支精简结构（紧凑结构）</h3><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">></span> <span class="token keyword">else</span> <span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span></code></pre><h3 id="7-函数形参定义顺序"><a href="#7-函数形参定义顺序" class="headerlink" title="7.函数形参定义顺序"></a>7.函数形参定义顺序</h3><p>位置参数、默认参数及可变参数。</p><p>可变参数（不定省长参数)  *args<br>默认参数：默认a= 100，可不传实参</p><h3 id="8-字典pop-方法"><a href="#8-字典pop-方法" class="headerlink" title="8.字典pop()方法"></a>8.字典pop()方法</h3><p>寻找字典中是否存在与第一个参数相同的键，存在即删除该键值对，并返回对应的值（value）到用于接收返回值的变量;<br>不存在就返回第二个参数。</p><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="1-录入学生分数"><a href="#1-录入学生分数" class="headerlink" title="1.录入学生分数"></a>1.录入学生分数</h3><p>字典可以实现：因为要求的课程名称和其对应的成绩构成字典的键值对<br>                         和统计元素个数一样，元素及其个数可以构成字典的键值对</p><p>键盘输入张嘉译学习的课程名称及考分等信息，信息间采用空格分隔，每个课程一行，空行回车结束录入，示例格式如下:<br>数学98<br>语文89<br>英语94<br>物理74<br>科学87<br>屏幕输出得分最高的课程及成绩，得分最低的课程及成绩，以及平均分(保留2位小数)，输出结果保存在考生文件夹下，命名为“PY202.txt”。<br>注意，其中逗号为英文逗号，格式如下:<br>最高分课程是数学98,最低分课程是物理74.平均分是88.40</p><pre class=" language-python"><code class="language-python">fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"PY202.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入课程名及对应的成绩："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 课程名 考分</span>course_score_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 准备空字典，进行构造</span><span class="token keyword">while</span> data<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 每个课程一行，空行回车结束录入(题目要求，放入while循环)</span>    course<span class="token punctuation">,</span> score <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#具体的构建是放在 while循环里的</span>    course_score_dict<span class="token punctuation">[</span>course<span class="token punctuation">]</span> <span class="token operator">=</span> eval<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># score 要进行数值运算，但是输入的是str,用eval()转换</span>    data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入课程名及对应的成绩："</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 为了循环显示，空行回车结束录入，结尾必须再放一个输入input()</span>course_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>list<span class="token punctuation">(</span>course_score_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只用处理成绩，用d.values()遍历值，排序sorted()只适用于列表</span>max_score<span class="token punctuation">,</span> min_score <span class="token operator">=</span> course_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> course_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># sorted()默认是升序</span>average_score <span class="token operator">=</span> sum<span class="token punctuation">(</span>course_list<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>course_list<span class="token punctuation">)</span>max_course<span class="token punctuation">,</span> min_course <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 准备为空的变量</span><span class="token keyword">for</span> item <span class="token keyword">in</span> course_score_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历每个键值对，以输出最高最低分对应的课程名称</span>    <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> max_score<span class="token punctuation">:</span>          max_course <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 值和最高分相等，则键对应的就是最高分课程的名称</span>    <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> min_score<span class="token punctuation">:</span>        min_course <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"最高分课程是{} {}, 最低分课程是{} {}, 平均分是{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>max_course<span class="token punctuation">,</span> max_score<span class="token punctuation">,</span> min_course<span class="token punctuation">,</span> min_score<span class="token punctuation">,</span> average_score<span class="token punctuation">)</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-猜数字（达芬奇密码）"><a href="#2-猜数字（达芬奇密码）" class="headerlink" title="2.猜数字（达芬奇密码）"></a>2.猜数字（达芬奇密码）</h3><p>25为种子，随机生成1个1~100之间的整数，让用户来猜，用户最多只能猜6次。接收用户输入的数字，输入的数字和随机数相同时，则打印”恭喜你，猜对了!”，然后程序结束;若输入的数比随机数小，则打印“小了，请再试试”，程序继续;若输入的数比随机数大，则打印“大了，请再试试”，程序继续;若6次还没猜对，在评判大小后，输出”“谢谢!请休息后再猜”，然后程序退出。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>n <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入猜测数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"恭喜你，猜对了！"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>  <span class="token comment" spellcheck="true"># 猜对了，直接退出</span>    <span class="token keyword">elif</span>  x <span class="token operator">></span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了，再试试"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了，再试试"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环变量</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"谢谢！请休息后再猜"</span><span class="token punctuation">)</span></code></pre><h1 id="高淇网课-（SXT）"><a href="#高淇网课-（SXT）" class="headerlink" title="高淇网课 （SXT）"></a>高淇网课 （SXT）</h1><h2 id="编程基础概念"><a href="#编程基础概念" class="headerlink" title="编程基础概念"></a><strong>编程基础概念</strong></h2><h3 id="Python-程序的构成"><a href="#Python-程序的构成" class="headerlink" title="Python 程序的构成"></a><strong>Python 程序的构成</strong></h3><p><img src="/../AppData/Roaming/Typora/typora-user-images/image-20221029111505297.png" alt="image-20221029111505297"></p><ol><li><p>Python 程序由模块组成。一个模块对应 python 源文件，一般后缀名是：.py。</p></li><li><p>模块由语句组成。运行 Python 程序时，按照模块中语句的顺序依次执行。</p></li><li><p>语句是 Python 程序的构造单元，用于创建对象、变量赋值、调用函数、控制语句等。(语句一般是表达式构成的)</p></li></ol><p>Python 官方推荐的 PEP-8 代码风格详细说明<br><a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></p><h3 id="使用-行连接符"><a href="#使用-行连接符" class="headerlink" title="使用\行连接符"></a><strong>使用\行连接符</strong></h3><p>一行程序长度是没有限制的，但是为了可读性更强，通常将一行比较长的程序分为多行。这是，我们可以使用\行连接符，把它放在行结束的地方。Python 解释器仍然将它们解释为同一行。</p><pre><code>&gt;&gt;&gt; a = [10,20,30,40,\50,60,70,\80,90,100]&gt;&gt;&gt; a[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</code></pre><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h3><p><strong>Python 中，一切皆对象。</strong>每个对象由：标识（identity）、类型（type）、value（值）组成。</p><ol><li><p>标识用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数 id(obj)可返回对象 obj 的标识。</p></li><li><p>类型用于表示对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用 type(obj)获得对象的所属类型。</p></li><li><p>值表示对象所存储的数据的信息。使用 print(obj)可以直接打印出值。</p></li></ol><p><strong>对象的本质就是：一个内存块，拥有特定的值，支持特定类型的相关操作。</strong><br><img src="/../AppData/Roaming/Typora/typora-user-images/image-20221029112019633.png" alt="image-20221029112019633"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h3><p>在 Python 中，变量也成为：对象的引用。因为，变量存储的就是对象的地址。</p><p>变量通过地址引用了“对象”。</p><p>变量位于：栈内存（压栈出栈等细节，后续再介绍）。</p><p>对象位于：堆内存。</p><h4 id="·Python-是动态类型语言"><a href="#·Python-是动态类型语言" class="headerlink" title="·Python 是动态类型语言"></a><strong>·Python 是动态类型语言</strong></h4><p>变量不需要显式声明类型。根据变量引用的对象，Python 解释器自动确定数据类型。</p><h4 id="·Python-是强类型语言"><a href="#·Python-是强类型语言" class="headerlink" title="·Python 是强类型语言"></a><strong>·Python 是强类型语言</strong></h4><p>每个对象都有数据类型，只支持该类型支持的操作。<br><img src="/../AppData/Roaming/Typora/typora-user-images/image-20221029112332280.png" alt="image-20221029112332280"></p><h2 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a><strong>变量的声明和赋值</strong></h2><p>变量的声明和赋值用于将一个变量绑定到一个对象上，格式如下：<br>变量名 = 表达式</p><p>最简单的表达式就是字面量。比如：a = 123 。 运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象；然后，将这个对象地址赋值给左边的变量。</p><p><strong>变量在使用前必须先被初始化（先被赋值）</strong></p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> my_nameTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell#17>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>my_nameNameError<span class="token punctuation">:</span> name <span class="token string">'my_name'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined</code></pre><p><strong>删除变量和垃圾回收机制</strong>(del)</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> a<span class="token operator">>></span><span class="token operator">></span> xTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"&lt;pyshell#20>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>xNameError<span class="token punctuation">:</span> name <span class="token string">'x'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined</code></pre><p>如果对象没有变量引用，就会被垃圾回收器回收，清空内存空间。(开辟的内存块没有变量占用会被清除)</p><p><strong>链式赋值</strong></p><p>链式赋值用于同一个对象赋值给多个变量。<br>x=y=123 相当于：x=123; y=123</p><p><strong>系列解包赋值</strong></p><p>系列数据赋值给对应相同个数的变量（个数必须保持一致）<br>&gt;&gt;&gt; a,b,c=4,5,6     相当于：a=4;b=5;c=6<br>使用系列解包赋值实现变量交换</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token number">2</span> <span class="token number">1</span></code></pre><p><strong>常量</strong></p><p>Python 不支持常量，即没有语法规则限制改变一个常量的值。我们只能约定常量的命名规则，以及在程序的逻辑上不对常量的值作出修改。</p><p>&gt;&gt;&gt; MAX_SPEED = 120<br>&gt;&gt;&gt; print(MAX_SPEED)<br>120</p><p>&gt;&gt;&gt; MAX_SPEED = 140   #实际是可以改的。只能逻辑上不做修改。&gt;&gt;&gt; print(MAX_SPEED)<br>140</p><h2 id="定义多点坐标-绘出折线-并计算起始点和终点距离"><a href="#定义多点坐标-绘出折线-并计算起始点和终点距离" class="headerlink" title="定义多点坐标_绘出折线_并计算起始点和终点距离"></a>定义多点坐标_绘出折线_并计算起始点和终点距离</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> math<span class="token comment" spellcheck="true">#定义多个点的坐标</span>x1<span class="token punctuation">,</span>y1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span>x2<span class="token punctuation">,</span>y2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span>x3<span class="token punctuation">,</span>y3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span>x4<span class="token punctuation">,</span>y4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token comment" spellcheck="true">#绘制折线</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x4<span class="token punctuation">,</span>y4<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算起始点和终点的距离</span>distance <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x4<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y1<span class="token operator">-</span>y4<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span>distance<span class="token punctuation">)</span></code></pre><p><img src="/../AppData/Roaming/Typora/typora-user-images/image-20221030094711399.png" alt="image-20221030094711399"></p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a><strong>布尔值</strong></h2><p>Python2 中没有布尔值，直接用数字 0 表示 False,用数字 1 表示 True。</p><p>Python3 中，把 True 和 False 定义成了关键字，但他们的本质还是 1 和 0，甚至可以和数字相加。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token number">4</span></code></pre><h2 id="列表元素的增加和删除"><a href="#列表元素的增加和删除" class="headerlink" title="列表元素的增加和删除"></a><strong>列表元素的增加和删除</strong></h2><p>当列表增加和删除元素时，列表会自动进行内存管理，大大减少了程序员的负担。但这个特点涉及列表元素的大量移动，效率较低。除非必要，我们<strong>一般只在列表的尾部</strong>添加元素或删除元素，这会大大提高列表的操作效率。</p><p><strong>append()方法</strong></p><p>原地修改列表对象，是真正的列表尾部添加新的元素，速度最快，推荐使用。</p><p>&gt;&gt;&gt; a = [20,40]</p><p>&gt;&gt;&gt; a.append(80)</p><p>&gt;&gt;&gt; a</p><p>[20, 40, 80]</p><p><strong>+运算符操作</strong></p><p>并不是真正的尾部添加元素，而是创建新的列表对象；将原列表的元素和新列表的元素依次复制到新的列表对象中。这样，会涉及大量的复制操作，对于操作大量元素不建议使用。</p><pre><code>&gt;&gt;&gt; a = [20,40]&gt;&gt;&gt; id(a)46016072&gt;&gt;&gt; a = a+[50]&gt;&gt;&gt; id(a)46015432</code></pre><p>通过如上测试，我们发现变量 a 的地址发生了变化。也就是创建了新的列表对象。</p><p><strong>extend()方法</strong></p><p>将目标列表的所有元素添加到本列表的尾部，属于原地操作，不创建新的列表对象。(可追加多个列表)</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/03/hello-world/"/>
      <url>/2022/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
